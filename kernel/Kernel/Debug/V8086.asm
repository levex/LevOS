; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\Kernel\V8086.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?i386LinearToFp@@YAHPAX@Z			; i386LinearToFp
; Function compile flags: /Ogtpy
; File c:\dev\levos\kernel\kernel\v8086.cpp
;	COMDAT ?i386LinearToFp@@YAHPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
?i386LinearToFp@@YAHPAX@Z PROC				; i386LinearToFp, COMDAT

; 7    :     unsigned seg, off;
; 8    :     off = (int) ptr & 0xf;
; 9    :     seg = ((int) ptr - ((int) ptr & 0xf)) / 16;

	mov	ecx, DWORD PTR _ptr$[esp-4]
	mov	edx, ecx
	and	edx, 15					; 0000000fH
	mov	eax, ecx
	sub	eax, edx
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4

; 10   :     return MK_FP(seg, off);

	shl	eax, 16					; 00000010H
	and	ecx, 15					; 0000000fH
	or	eax, ecx

; 11   : }

	ret	0
?i386LinearToFp@@YAHPAX@Z ENDP				; i386LinearToFp
_TEXT	ENDS
PUBLIC	?v86_init@@YAXPAUuregs@@@Z			; v86_init
EXTRN	?memset@@YAPAXPAXDI@Z:PROC			; memset
; Function compile flags: /Ogtpy
;	COMDAT ?v86_init@@YAXPAUuregs@@@Z
_TEXT	SEGMENT
_regs$ = 8						; size = 4
?v86_init@@YAXPAUuregs@@@Z PROC				; v86_init, COMDAT

; 14   : {

	push	esi

; 15   : 	// step 1: allocate a stack below 1MB
; 16   : 	static char* v86_stack = (char*)0xFFFF;
; 17   : 	// step 2: set up the regs
; 18   : 	memset(regs, 0, sizeof(uregs));

	mov	esi, DWORD PTR _regs$[esp]
	push	92					; 0000005cH
	push	0
	push	esi
	call	?memset@@YAPAXPAXDI@Z			; memset

; 19   : 	regs->user_esp = 0xFFFF; // stack begins at 0xFFFF
; 20   : 	regs->user_ss = 0; // set stack segment
; 21   : 	regs->fs = regs->ds = regs->gs = regs->es = 0x8; // set selectors

	mov	eax, 8
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+68], 65535		; 0000ffffH
	mov	DWORD PTR [esi+72], 0
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR [esi+44], eax
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+40], eax

; 22   : 	regs->eflags = 0x00020002L; // VM = 1, IOPL = 0

	mov	DWORD PTR [esi+64], 131074		; 00020002H
	pop	esi

; 23   : }

	ret	0
?v86_init@@YAXPAUuregs@@@Z ENDP				; v86_init
_TEXT	ENDS
END
