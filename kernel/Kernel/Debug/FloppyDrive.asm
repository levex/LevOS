; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\Kernel\FloppyDrive.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
__CurrentDrive DB 01H DUP (?)
__FloppyDiskIRQ DB 01H DUP (?)
_BSS	ENDS
PUBLIC	?dma_initialize_floppy@@YA_NPAEI@Z		; dma_initialize_floppy
EXTRN	?dma_unmask_all@@YAXH@Z:PROC			; dma_unmask_all
EXTRN	?dma_set_read@@YAXE@Z:PROC			; dma_set_read
EXTRN	?dma_set_count@@YAXEEE@Z:PROC			; dma_set_count
EXTRN	?dma_set_address@@YAXEEE@Z:PROC			; dma_set_address
EXTRN	?dma_reset_flipflop@@YAXH@Z:PROC		; dma_reset_flipflop
EXTRN	?dma_mask_channel@@YAXE@Z:PROC			; dma_mask_channel
EXTRN	?dma_reset@@YAXH@Z:PROC				; dma_reset
; Function compile flags: /Ogtpy
; File c:\dev\levos\kernel\kernel\floppydrive.cpp
;	COMDAT ?dma_initialize_floppy@@YA_NPAEI@Z
_TEXT	SEGMENT
_c$ = -8						; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?dma_initialize_floppy@@YA_NPAEI@Z PROC			; dma_initialize_floppy, COMDAT

; 161  : bool _cdecl dma_initialize_floppy(uint8_t* buffer, unsigned length){

	sub	esp, 8
	push	esi

; 162  :    union{
; 163  :       uint8_t byte[4];//Lo[0], Mid[1], Hi[2]
; 164  :       unsigned long l;
; 165  :    }a, c;
; 166  : 
; 167  :    a.l=(unsigned)buffer;
; 168  :    c.l=(unsigned)length-1;

	mov	esi, DWORD PTR _length$[esp+8]
	push	edi

; 169  : 
; 170  :    //Check for buffer issues
; 171  :    if ((a.l >> 24) || (c.l >> 16) || (((a.l & 0xffff)+c.l) >> 16)){

	mov	edi, DWORD PTR _buffer$[esp+12]
	dec	esi
	mov	DWORD PTR _c$[esp+16], esi
	test	edi, -16777216				; ff000000H
	jne	SHORT $LN1@dma_initia
	test	esi, -65536				; ffff0000H
	jne	SHORT $LN1@dma_initia
	movzx	eax, di
	add	eax, esi
	test	eax, -65536				; ffff0000H
	jne	SHORT $LN1@dma_initia

; 180  :    }
; 181  : 
; 182  :    dma_reset (1);

	push	1
	call	?dma_reset@@YAXH@Z			; dma_reset

; 183  :    dma_mask_channel( FDC_DMA_CHANNEL );//Mask channel 2

	push	2
	call	?dma_mask_channel@@YAXE@Z		; dma_mask_channel

; 184  :    dma_reset_flipflop ( 1 );//Flipflop reset on DMA 1

	push	1
	call	?dma_reset_flipflop@@YAXH@Z		; dma_reset_flipflop

; 185  : 
; 186  :    dma_set_address( FDC_DMA_CHANNEL, a.byte[0],a.byte[1]);//Buffer address

	mov	ecx, DWORD PTR _buffer$[esp+25]
	push	ecx
	push	edi
	push	2
	call	?dma_set_address@@YAXEEE@Z		; dma_set_address

; 187  :    dma_reset_flipflop( 1 );//Flipflop reset on DMA 1

	push	1
	call	?dma_reset_flipflop@@YAXH@Z		; dma_reset_flipflop

; 188  : 
; 189  :    dma_set_count( FDC_DMA_CHANNEL, c.byte[0],c.byte[1]);//Set count

	mov	edx, DWORD PTR _c$[esp+45]
	push	edx
	push	esi
	push	2
	call	?dma_set_count@@YAXEEE@Z		; dma_set_count

; 190  :    dma_set_read ( FDC_DMA_CHANNEL );

	push	2
	call	?dma_set_read@@YAXE@Z			; dma_set_read

; 191  : 
; 192  :    dma_unmask_all( 1 );//Unmask channel 2

	push	1
	call	?dma_unmask_all@@YAXH@Z			; dma_unmask_all
	add	esp, 48					; 00000030H
	pop	edi

; 193  : 
; 194  :    return true;

	mov	al, 1
	pop	esi

; 195  : }

	add	esp, 8
	ret	0
$LN1@dma_initia:
	pop	edi

; 172  : #ifdef _DEBUG
; 173  :       _asm{
; 174  :          mov      eax, 0x1337
; 175  :          cli
; 176  :          hlt
; 177  :       }
; 178  : #endif
; 179  :       return false;

	xor	al, al
	pop	esi

; 195  : }

	add	esp, 8
	ret	0
?dma_initialize_floppy@@YA_NPAEI@Z ENDP			; dma_initialize_floppy
_TEXT	ENDS
PUBLIC	?flpydsk_read_status@@YAEXZ			; flpydsk_read_status
EXTRN	?inport@@YAEG@Z:PROC				; inport
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_read_status@@YAEXZ
_TEXT	SEGMENT
?flpydsk_read_status@@YAEXZ PROC			; flpydsk_read_status, COMDAT

; 203  : 
; 204  : 	// just return main status register
; 205  : 	return inport (FLPYDSK_MSR);

	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4

; 206  : }

	ret	0
?flpydsk_read_status@@YAEXZ ENDP			; flpydsk_read_status
_TEXT	ENDS
PUBLIC	?flpydsk_write_dor@@YAXE@Z			; flpydsk_write_dor
EXTRN	?outport@@YAXGE@Z:PROC				; outport
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_write_dor@@YAXE@Z
_TEXT	SEGMENT
_val$ = 8						; size = 1
?flpydsk_write_dor@@YAXE@Z PROC				; flpydsk_write_dor, COMDAT

; 210  : 
; 211  : 	// write the digital output register
; 212  : 	outport (FLPYDSK_DOR, val);

	mov	eax, DWORD PTR _val$[esp-4]
	push	eax
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 213  : }

	ret	0
?flpydsk_write_dor@@YAXE@Z ENDP				; flpydsk_write_dor
_TEXT	ENDS
PUBLIC	?flpydsk_send_command@@YAXE@Z			; flpydsk_send_command
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_send_command@@YAXE@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 1
?flpydsk_send_command@@YAXE@Z PROC			; flpydsk_send_command, COMDAT

; 216  : void flpydsk_send_command (uint8_t cmd) {

	push	esi

; 217  : 
; 218  : 	// wait until data register is ready. We send commands to the data register
; 219  : 	for (int i = 0; i < 500; i++ )

	xor	esi, esi
$LL4@flpydsk_se:

; 220  : 		if ( flpydsk_read_status () & FLPYDSK_MSR_MASK_DATAREG )

	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN10@flpydsk_se

; 217  : 
; 218  : 	// wait until data register is ready. We send commands to the data register
; 219  : 	for (int i = 0; i < 500; i++ )

	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL4@flpydsk_se
	pop	esi

; 222  : }

	ret	0
$LN10@flpydsk_se:

; 221  : 			return outport (FLPYDSK_FIFO, cmd);

	mov	eax, DWORD PTR _cmd$[esp]
	push	eax
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	pop	esi

; 222  : }

	ret	0
?flpydsk_send_command@@YAXE@Z ENDP			; flpydsk_send_command
_TEXT	ENDS
PUBLIC	?flpydsk_read_data@@YAEXZ			; flpydsk_read_data
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_read_data@@YAEXZ
_TEXT	SEGMENT
?flpydsk_read_data@@YAEXZ PROC				; flpydsk_read_data, COMDAT

; 225  : uint8_t flpydsk_read_data () {

	push	esi

; 226  : 
; 227  : 	// same as above function but returns data register for reading
; 228  : 	for (int i = 0; i < 500; i++ )

	xor	esi, esi
$LL4@flpydsk_re:

; 229  : 		if ( flpydsk_read_status () & FLPYDSK_MSR_MASK_DATAREG )

	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN10@flpydsk_re

; 226  : 
; 227  : 	// same as above function but returns data register for reading
; 228  : 	for (int i = 0; i < 500; i++ )

	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL4@flpydsk_re

; 231  : 
; 232  : 	return 0;

	xor	al, al
	pop	esi

; 233  : }

	ret	0
$LN10@flpydsk_re:

; 230  : 			return inport (FLPYDSK_FIFO);

	push	1013					; 000003f5H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	pop	esi

; 233  : }

	ret	0
?flpydsk_read_data@@YAEXZ ENDP				; flpydsk_read_data
_TEXT	ENDS
PUBLIC	?flpydsk_write_ccr@@YAXE@Z			; flpydsk_write_ccr
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_write_ccr@@YAXE@Z
_TEXT	SEGMENT
_val$ = 8						; size = 1
?flpydsk_write_ccr@@YAXE@Z PROC				; flpydsk_write_ccr, COMDAT

; 237  : 
; 238  : 	// write the configuation control
; 239  : 	outport (FLPYDSK_CTRL, val);

	mov	eax, DWORD PTR _val$[esp-4]
	push	eax
	push	1015					; 000003f7H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 240  : }

	ret	0
?flpydsk_write_ccr@@YAXE@Z ENDP				; flpydsk_write_ccr
_TEXT	ENDS
PUBLIC	?flpydsk_wait_irq@@YAXXZ			; flpydsk_wait_irq
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_wait_irq@@YAXXZ
_TEXT	SEGMENT
?flpydsk_wait_irq@@YAXXZ PROC				; flpydsk_wait_irq, COMDAT

; 247  : inline void flpydsk_wait_irq () {

$LL2@flpydsk_wa:

; 248  : 
; 249  : 	// wait for irq to fire
; 250  : 	while ( _FloppyDiskIRQ == 0)

	mov	al, BYTE PTR __FloppyDiskIRQ
	test	al, al
	je	SHORT $LL2@flpydsk_wa

; 251  : 		;
; 252  : 	_FloppyDiskIRQ = 0;

	mov	BYTE PTR __FloppyDiskIRQ, 0

; 253  : }

	ret	0
?flpydsk_wait_irq@@YAXXZ ENDP				; flpydsk_wait_irq
_TEXT	ENDS
PUBLIC	?i86_flpy_irq@@YAXXZ				; i86_flpy_irq
EXTRN	?interruptdone@@YAXI@Z:PROC			; interruptdone
; Function compile flags: /Ogtpy
;	COMDAT ?i86_flpy_irq@@YAXXZ
_TEXT	SEGMENT
?i86_flpy_irq@@YAXXZ PROC				; i86_flpy_irq, COMDAT

; 257  : void _cdecl i86_flpy_irq () {

	push	ebx
	push	esi
	push	edi

; 258  : 
; 259  : 	_asm add esp, 12

	add	esp, 12					; 0000000cH

; 260  : 	_asm pushad

	pushad

; 261  : 	_asm cli

	cli

; 262  : 
; 263  : 	// irq fired
; 264  : 	_FloppyDiskIRQ = 1;
; 265  : 
; 266  : 	// tell hal we are done
; 267  : 	interruptdone( FLOPPY_IRQ );

	push	6
	mov	BYTE PTR __FloppyDiskIRQ, 1
	call	?interruptdone@@YAXI@Z			; interruptdone
	add	esp, 4

; 268  : 
; 269  : 	_asm sti

	sti

; 270  : 	_asm popad

	popad

; 271  : 	_asm iretd

	iretd

; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	ret	0
?i86_flpy_irq@@YAXXZ ENDP				; i86_flpy_irq
_TEXT	ENDS
PUBLIC	?flpydsk_check_int@@YAXPAI0@Z			; flpydsk_check_int
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_check_int@@YAXPAI0@Z
_TEXT	SEGMENT
_st0$ = 8						; size = 4
_cyl$ = 12						; size = 4
?flpydsk_check_int@@YAXPAI0@Z PROC			; flpydsk_check_int, COMDAT

; 279  : void flpydsk_check_int (uint32_t* st0, uint32_t* cyl) {

	push	esi

; 280  : 
; 281  : 	flpydsk_send_command (FDC_CMD_CHECK_INT);

	xor	esi, esi
$LL6@flpydsk_ch:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN30@flpydsk_ch
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL6@flpydsk_ch

; 284  : 	*cyl = flpydsk_read_data ();

	jmp	SHORT $LN4@flpydsk_ch
$LN30@flpydsk_ch:

; 280  : 
; 281  : 	flpydsk_send_command (FDC_CMD_CHECK_INT);

	push	8
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN4@flpydsk_ch:

; 282  : 
; 283  : 	*st0 = flpydsk_read_data ();

	xor	esi, esi
$LL14@flpydsk_ch:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN31@flpydsk_ch
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL14@flpydsk_ch
	xor	al, al
$LN15@flpydsk_ch:
	mov	ecx, DWORD PTR _st0$[esp]
	movzx	eax, al
	mov	DWORD PTR [ecx], eax

; 284  : 	*cyl = flpydsk_read_data ();

	xor	esi, esi
	npad	9
$LL22@flpydsk_ch:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN32@flpydsk_ch
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL22@flpydsk_ch
	mov	edx, DWORD PTR _cyl$[esp]
	xor	al, al
	movzx	ecx, al
	mov	DWORD PTR [edx], ecx
	pop	esi

; 285  : }

	ret	0
$LN31@flpydsk_ch:

; 282  : 
; 283  : 	*st0 = flpydsk_read_data ();

	push	1013					; 000003f5H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	jmp	SHORT $LN15@flpydsk_ch
$LN32@flpydsk_ch:

; 284  : 	*cyl = flpydsk_read_data ();

	push	1013					; 000003f5H
	call	?inport@@YAEG@Z				; inport
	movzx	edx, al
	mov	eax, DWORD PTR _cyl$[esp+4]
	add	esp, 4
	mov	DWORD PTR [eax], edx
	pop	esi

; 285  : }

	ret	0
?flpydsk_check_int@@YAXPAI0@Z ENDP			; flpydsk_check_int
_TEXT	ENDS
PUBLIC	?flpydsk_control_motor@@YAX_N@Z			; flpydsk_control_motor
EXTRN	?sleep@@YAXH@Z:PROC				; sleep
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_control_motor@@YAX_N@Z
_TEXT	SEGMENT
_b$ = 8							; size = 1
?flpydsk_control_motor@@YAX_N@Z PROC			; flpydsk_control_motor, COMDAT

; 289  : 
; 290  : 	// sanity check: invalid drive
; 291  : 	if (_CurrentDrive > 3)

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN10@flpydsk_co

; 292  : 		return;
; 293  : 
; 294  : 	uint8_t motor = 0;
; 295  : 
; 296  : 	// select the correct mask based on current drive
; 297  : 	switch (_CurrentDrive) {

	movzx	ecx, al
	xor	dl, dl
	cmp	ecx, 3
	ja	SHORT $LN7@flpydsk_co
	jmp	DWORD PTR $LN18@flpydsk_co[ecx*4]
$LN6@flpydsk_co:

; 298  : 
; 299  : 		case 0:
; 300  : 			motor = FLPYDSK_DOR_MASK_DRIVE0_MOTOR;

	mov	dl, 16					; 00000010H

; 301  : 			break;

	jmp	SHORT $LN7@flpydsk_co
$LN5@flpydsk_co:

; 302  : 		case 1:
; 303  : 			motor = FLPYDSK_DOR_MASK_DRIVE1_MOTOR;

	mov	dl, 32					; 00000020H

; 304  : 			break;

	jmp	SHORT $LN7@flpydsk_co
$LN4@flpydsk_co:

; 305  : 		case 2:
; 306  : 			motor = FLPYDSK_DOR_MASK_DRIVE2_MOTOR;

	mov	dl, 64					; 00000040H

; 307  : 			break;

	jmp	SHORT $LN7@flpydsk_co
$LN3@flpydsk_co:

; 308  : 		case 3:
; 309  : 			motor = FLPYDSK_DOR_MASK_DRIVE3_MOTOR;

	mov	dl, 128					; 00000080H
$LN7@flpydsk_co:

; 310  : 			break;
; 311  : 	}
; 312  : 
; 313  : 	// turn on or off the motor of that drive
; 314  : 	if (b)

	cmp	BYTE PTR _b$[esp-4], 0
	je	SHORT $LN2@flpydsk_co

; 315  : 		flpydsk_write_dor (uint8_t(_CurrentDrive | motor | FLPYDSK_DOR_MASK_RESET | FLPYDSK_DOR_MASK_DMA));

	or	al, dl
	or	al, 12					; 0000000cH
	movzx	eax, al
	push	eax

; 316  : 	else

	jmp	SHORT $LN17@flpydsk_co
$LN2@flpydsk_co:

; 317  : 		flpydsk_write_dor (FLPYDSK_DOR_MASK_RESET);

	push	4
$LN17@flpydsk_co:
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 318  : 
; 319  : 	// in all cases; wait a little bit for the motor to spin up/turn off
; 320  : 	sleep (20);

	mov	DWORD PTR _b$[esp-4], 20		; 00000014H
	jmp	?sleep@@YAXH@Z				; sleep
$LN10@flpydsk_co:

; 321  : }

	ret	0
	npad	2
$LN18@flpydsk_co:
	DD	$LN6@flpydsk_co
	DD	$LN5@flpydsk_co
	DD	$LN4@flpydsk_co
	DD	$LN3@flpydsk_co
?flpydsk_control_motor@@YAX_N@Z ENDP			; flpydsk_control_motor
_TEXT	ENDS
PUBLIC	?flpydsk_drive_data@@YAXEEE_N@Z			; flpydsk_drive_data
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_drive_data@@YAXEEE_N@Z
_TEXT	SEGMENT
_data$ = 8						; size = 1
_stepr$ = 8						; size = 1
_loadt$ = 12						; size = 1
_unloadt$ = 16						; size = 1
_dma$ = 20						; size = 1
?flpydsk_drive_data@@YAXEEE_N@Z PROC			; flpydsk_drive_data, COMDAT

; 324  : void flpydsk_drive_data (uint8_t stepr, uint8_t loadt, uint8_t unloadt, bool dma ) {

	push	esi

; 325  : 
; 326  : 	uint8_t data = 0;
; 327  : 
; 328  : 	// send command
; 329  : 	flpydsk_send_command (FDC_CMD_SPECIFY);

	xor	esi, esi
$LL6@flpydsk_dr:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN30@flpydsk_dr
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL6@flpydsk_dr

; 333  : 		flpydsk_send_command (data);

	jmp	SHORT $LN4@flpydsk_dr
$LN30@flpydsk_dr:

; 325  : 
; 326  : 	uint8_t data = 0;
; 327  : 
; 328  : 	// send command
; 329  : 	flpydsk_send_command (FDC_CMD_SPECIFY);

	push	3
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN4@flpydsk_dr:

; 330  : 	data = ( (stepr & 0xf) << 4) | (unloadt & 0xf);

	mov	al, BYTE PTR _stepr$[esp]
	mov	cl, BYTE PTR _unloadt$[esp]
	shl	al, 4
	and	cl, 15					; 0000000fH
	or	al, cl
	mov	BYTE PTR _data$[esp], al

; 331  : 		flpydsk_send_command (data);

	xor	esi, esi
$LL14@flpydsk_dr:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN31@flpydsk_dr
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL14@flpydsk_dr

; 333  : 		flpydsk_send_command (data);

	jmp	SHORT $LN12@flpydsk_dr
$LN31@flpydsk_dr:

; 331  : 		flpydsk_send_command (data);

	mov	edx, DWORD PTR _data$[esp]
	push	edx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN12@flpydsk_dr:

; 332  : 	data = (( loadt << 1 ) | ( (dma) ? 0 : 1 ) );

	cmp	BYTE PTR _dma$[esp], 0
	mov	cl, BYTE PTR _loadt$[esp]
	sete	al
	add	cl, cl
	or	al, cl
	mov	BYTE PTR _data$[esp], al

; 333  : 		flpydsk_send_command (data);

	xor	esi, esi
	npad	8
$LL22@flpydsk_dr:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN32@flpydsk_dr
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL22@flpydsk_dr
	pop	esi

; 334  : }

	ret	0
$LN32@flpydsk_dr:

; 333  : 		flpydsk_send_command (data);

	mov	edx, DWORD PTR _data$[esp]
	push	edx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	pop	esi

; 334  : }

	ret	0
?flpydsk_drive_data@@YAXEEE_N@Z ENDP			; flpydsk_drive_data
_TEXT	ENDS
PUBLIC	?flpydsk_calibrate@@YAHE@Z			; flpydsk_calibrate
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_calibrate@@YAHE@Z
_TEXT	SEGMENT
_cyl$ = -8						; size = 4
_st0$ = -4						; size = 4
tv226 = 8						; size = 4
_drive$ = 8						; size = 1
?flpydsk_calibrate@@YAHE@Z PROC				; flpydsk_calibrate, COMDAT

; 337  : int flpydsk_calibrate (uint8_t drive) {

	sub	esp, 8

; 338  : 
; 339  : 	uint32_t st0, cyl;
; 340  : 
; 341  : 	if (drive >= 4)

	cmp	BYTE PTR _drive$[esp+4], 4
	jb	SHORT $LN5@flpydsk_ca

; 342  : 		return -2;

	mov	eax, -2					; fffffffeH

; 365  : }

	add	esp, 8
	ret	0
$LN5@flpydsk_ca:

; 343  : 
; 344  : 	// turn on the motor
; 345  : 	flpydsk_control_motor (true);

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN17@flpydsk_ca
	movzx	edx, al
	xor	cl, cl
	cmp	edx, 3
	ja	SHORT $LN14@flpydsk_ca
	jmp	DWORD PTR $LN89@flpydsk_ca[edx*4]
$LN13@flpydsk_ca:
	mov	cl, 16					; 00000010H
	jmp	SHORT $LN14@flpydsk_ca
$LN12@flpydsk_ca:
	mov	cl, 32					; 00000020H
	jmp	SHORT $LN14@flpydsk_ca
$LN11@flpydsk_ca:
	mov	cl, 64					; 00000040H
	jmp	SHORT $LN14@flpydsk_ca
$LN10@flpydsk_ca:
	mov	cl, 128					; 00000080H
$LN14@flpydsk_ca:
	or	al, cl
	or	al, 12					; 0000000cH
	movzx	eax, al
	push	eax
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN17@flpydsk_ca:

; 346  : 
; 347  : 	for (int i = 0; i < 10; i++) {

	push	edi
	xor	edi, edi
	push	esi
	npad	5
$LL4@flpydsk_ca:

; 348  : 
; 349  : 		// send command
; 350  : 		flpydsk_send_command ( FDC_CMD_CALIBRATE );

	xor	esi, esi
$LL26@flpydsk_ca:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN77@flpydsk_ca
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL26@flpydsk_ca

; 354  : 
; 355  : 		// did we fine cylinder 0? if so, we are done
; 356  : 		if (!cyl) {

	jmp	SHORT $LN24@flpydsk_ca
$LN77@flpydsk_ca:

; 348  : 
; 349  : 		// send command
; 350  : 		flpydsk_send_command ( FDC_CMD_CALIBRATE );

	push	7
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN24@flpydsk_ca:

; 351  : 		flpydsk_send_command ( drive );

	xor	esi, esi
	npad	1
$LL34@flpydsk_ca:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN78@flpydsk_ca
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL34@flpydsk_ca

; 354  : 
; 355  : 		// did we fine cylinder 0? if so, we are done
; 356  : 		if (!cyl) {

	jmp	SHORT $LL40@flpydsk_ca
$LN78@flpydsk_ca:

; 351  : 		flpydsk_send_command ( drive );

	mov	ecx, DWORD PTR _drive$[esp+12]
	push	ecx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	npad	2

; 352  : 		flpydsk_wait_irq ();

$LL40@flpydsk_ca:
	mov	dl, BYTE PTR __FloppyDiskIRQ
	test	dl, dl
	je	SHORT $LL40@flpydsk_ca

; 353  : 		flpydsk_check_int ( &st0, &cyl);

	lea	eax, DWORD PTR _cyl$[esp+16]
	push	eax
	lea	ecx, DWORD PTR _st0$[esp+20]
	push	ecx
	mov	BYTE PTR __FloppyDiskIRQ, 0
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8

; 354  : 
; 355  : 		// did we fine cylinder 0? if so, we are done
; 356  : 		if (!cyl) {

	cmp	DWORD PTR _cyl$[esp+16], 0
	je	SHORT $LN79@flpydsk_ca

; 346  : 
; 347  : 	for (int i = 0; i < 10; i++) {

	inc	edi
	cmp	edi, 10					; 0000000aH
	jl	$LL4@flpydsk_ca

; 360  : 		}
; 361  : 	}
; 362  : 
; 363  : 	flpydsk_control_motor (false);

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN67@flpydsk_ca
	push	4
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN67@flpydsk_ca:

; 364  : 	return -1;

	pop	esi
	or	eax, -1
	pop	edi

; 365  : }

	add	esp, 8
	ret	0
$LN79@flpydsk_ca:

; 357  : 
; 358  : 			flpydsk_control_motor (false);

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN52@flpydsk_ca
	push	4
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN52@flpydsk_ca:

; 359  : 			return 0;

	pop	esi
	xor	eax, eax
	pop	edi

; 365  : }

	add	esp, 8
	ret	0
	npad	1
$LN89@flpydsk_ca:
	DD	$LN13@flpydsk_ca
	DD	$LN12@flpydsk_ca
	DD	$LN11@flpydsk_ca
	DD	$LN10@flpydsk_ca
?flpydsk_calibrate@@YAHE@Z ENDP				; flpydsk_calibrate
_TEXT	ENDS
PUBLIC	?flpydsk_disable_controller@@YAXXZ		; flpydsk_disable_controller
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_disable_controller@@YAXXZ
_TEXT	SEGMENT
?flpydsk_disable_controller@@YAXXZ PROC			; flpydsk_disable_controller, COMDAT

; 369  : 
; 370  : 	flpydsk_write_dor (0);

	push	0
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 371  : }

	ret	0
?flpydsk_disable_controller@@YAXXZ ENDP			; flpydsk_disable_controller
_TEXT	ENDS
PUBLIC	?flpydsk_enable_controller@@YAXXZ		; flpydsk_enable_controller
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_enable_controller@@YAXXZ
_TEXT	SEGMENT
?flpydsk_enable_controller@@YAXXZ PROC			; flpydsk_enable_controller, COMDAT

; 375  : 
; 376  : 	flpydsk_write_dor ( FLPYDSK_DOR_MASK_RESET | FLPYDSK_DOR_MASK_DMA);

	push	12					; 0000000cH
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 377  : }

	ret	0
?flpydsk_enable_controller@@YAXXZ ENDP			; flpydsk_enable_controller
_TEXT	ENDS
PUBLIC	?flpydsk_reset@@YAXXZ				; flpydsk_reset
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_reset@@YAXXZ
_TEXT	SEGMENT
_cyl$ = -8						; size = 4
_st0$ = -4						; size = 4
?flpydsk_reset@@YAXXZ PROC				; flpydsk_reset, COMDAT

; 380  : void flpydsk_reset () {

	sub	esp, 8

; 381  : 
; 382  : 	uint32_t st0, cyl;
; 383  : 
; 384  : 	// reset the controller
; 385  : 	flpydsk_disable_controller ();

	push	0
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport

; 386  : 	flpydsk_enable_controller ();

	push	12					; 0000000cH
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 16					; 00000010H
	npad	2

; 387  : 	flpydsk_wait_irq ();

$LL15@flpydsk_re@2:
	mov	al, BYTE PTR __FloppyDiskIRQ
	test	al, al
	je	SHORT $LL15@flpydsk_re@2
	push	esi
	mov	BYTE PTR __FloppyDiskIRQ, 0
	mov	esi, 4
$LL3@flpydsk_re@2:

; 388  : 
; 389  : 	// send CHECK_INT/SENSE INTERRUPT command to all drives
; 390  : 	for (int i=0; i<4; i++)
; 391  : 		flpydsk_check_int (&st0,&cyl);

	lea	ecx, DWORD PTR _cyl$[esp+12]
	push	ecx
	lea	edx, DWORD PTR _st0$[esp+16]
	push	edx
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8
	dec	esi
	jne	SHORT $LL3@flpydsk_re@2

; 392  : 
; 393  : 	// transfer speed 500kb/s
; 394  : 	flpydsk_write_ccr (0);

	push	esi
	push	1015					; 000003f7H
	call	?outport@@YAXGE@Z			; outport

; 395  : 
; 396  : 	// pass mechanical drive info. steprate=3ms, unload time=240ms, load time=16ms
; 397  : 	flpydsk_drive_data (3,16,240,true);

	push	1
	push	240					; 000000f0H
	push	16					; 00000010H
	push	3
	call	?flpydsk_drive_data@@YAXEEE_N@Z		; flpydsk_drive_data

; 398  : 
; 399  : 	// calibrate the disk
; 400  : 	flpydsk_calibrate ( _CurrentDrive );

	movzx	eax, BYTE PTR __CurrentDrive
	push	eax
	call	?flpydsk_calibrate@@YAHE@Z		; flpydsk_calibrate
	add	esp, 28					; 0000001cH
	pop	esi

; 401  : }

	add	esp, 8
	ret	0
?flpydsk_reset@@YAXXZ ENDP				; flpydsk_reset
_TEXT	ENDS
PUBLIC	?flpydsk_read_sector_imp@@YAXEEE@Z		; flpydsk_read_sector_imp
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_read_sector_imp@@YAXEEE@Z
_TEXT	SEGMENT
_head$ = 8						; size = 1
$T3334 = 8						; size = 1
_st0$ = 8						; size = 4
_track$ = 12						; size = 1
_sector$ = 16						; size = 1
_cyl$ = 16						; size = 4
?flpydsk_read_sector_imp@@YAXEEE@Z PROC			; flpydsk_read_sector_imp, COMDAT

; 404  : void flpydsk_read_sector_imp (uint8_t head, uint8_t track, uint8_t sector) {

	push	esi
	push	edi

; 405  : 
; 406  : 	uint32_t st0, cyl;
; 407  : 
; 408  : 	// initialize DMA
; 409  : 	dma_initialize_floppy ((uint8_t*) DMA_BUFFER, 512 );

	push	1
	call	?dma_reset@@YAXH@Z			; dma_reset
	push	2
	call	?dma_mask_channel@@YAXE@Z		; dma_mask_channel
	push	1
	call	?dma_reset_flipflop@@YAXH@Z		; dma_reset_flipflop
	push	16					; 00000010H
	push	0
	push	2
	call	?dma_set_address@@YAXEEE@Z		; dma_set_address
	push	1
	call	?dma_reset_flipflop@@YAXH@Z		; dma_reset_flipflop
	push	1
	push	255					; 000000ffH
	push	2
	call	?dma_set_count@@YAXEEE@Z		; dma_set_count
	push	2
	call	?dma_set_read@@YAXE@Z			; dma_set_read
	push	1
	call	?dma_unmask_all@@YAXH@Z			; dma_unmask_all

; 410  : 
; 411  : 	// set the DMA for read transfer
; 412  : 	dma_set_read ( FDC_DMA_CHANNEL );

	push	2
	call	?dma_set_read@@YAXE@Z			; dma_set_read
	add	esp, 52					; 00000034H

; 413  : 
; 414  : 	// read in a sector
; 415  : 	flpydsk_send_command (
; 416  : 				FDC_CMD_READ_SECT | FDC_CMD_EXT_MULTITRACK | FDC_CMD_EXT_SKIP | FDC_CMD_EXT_DENSITY);

	xor	esi, esi
$LL15@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN108@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL15@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN13@flpydsk_re@3
$LN108@flpydsk_re@3:

; 413  : 
; 414  : 	// read in a sector
; 415  : 	flpydsk_send_command (
; 416  : 				FDC_CMD_READ_SECT | FDC_CMD_EXT_MULTITRACK | FDC_CMD_EXT_SKIP | FDC_CMD_EXT_DENSITY);

	push	230					; 000000e6H
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN13@flpydsk_re@3:

; 417  : 	flpydsk_send_command ( head << 2 | _CurrentDrive );

	push	ebx
	mov	ebx, DWORD PTR _head$[esp+8]
	mov	al, bl
	add	al, al
	add	al, al
	or	al, BYTE PTR __CurrentDrive
	xor	esi, esi
	mov	BYTE PTR $T3334[esp+8], al
$LL23@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN109@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL23@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN21@flpydsk_re@3
$LN109@flpydsk_re@3:

; 417  : 	flpydsk_send_command ( head << 2 | _CurrentDrive );

	mov	ecx, DWORD PTR $T3334[esp+8]
	push	ecx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN21@flpydsk_re@3:

; 418  : 	flpydsk_send_command ( track);

	xor	esi, esi
$LL31@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN110@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL31@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN29@flpydsk_re@3
$LN110@flpydsk_re@3:

; 418  : 	flpydsk_send_command ( track);

	mov	edx, DWORD PTR _track$[esp+8]
	push	edx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN29@flpydsk_re@3:

; 419  : 	flpydsk_send_command ( head);

	xor	esi, esi
$LL39@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN111@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL39@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN37@flpydsk_re@3
$LN111@flpydsk_re@3:

; 419  : 	flpydsk_send_command ( head);

	push	ebx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN37@flpydsk_re@3:

; 420  : 	flpydsk_send_command ( sector);

	xor	esi, esi
	pop	ebx
$LL47@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN112@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL47@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN45@flpydsk_re@3
$LN112@flpydsk_re@3:

; 420  : 	flpydsk_send_command ( sector);

	mov	eax, DWORD PTR _sector$[esp+4]
	push	eax
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN45@flpydsk_re@3:

; 421  : 	flpydsk_send_command ( FLPYDSK_SECTOR_DTL_512 );

	xor	esi, esi
$LL55@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN113@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL55@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN53@flpydsk_re@3
$LN113@flpydsk_re@3:

; 421  : 	flpydsk_send_command ( FLPYDSK_SECTOR_DTL_512 );

	push	2
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN53@flpydsk_re@3:

; 422  : 	flpydsk_send_command ( ( ( sector + 1 ) >= FLPY_SECTORS_PER_TRACK ) ? FLPY_SECTORS_PER_TRACK : sector + 1 );

	movzx	eax, BYTE PTR _sector$[esp+4]
	inc	eax
	mov	edi, 18					; 00000012H
	cmp	eax, 18					; 00000012H
	jge	SHORT $LN7@flpydsk_re@3
	mov	edi, eax
$LN7@flpydsk_re@3:
	xor	esi, esi
$LL63@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN114@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL63@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN61@flpydsk_re@3
$LN114@flpydsk_re@3:

; 422  : 	flpydsk_send_command ( ( ( sector + 1 ) >= FLPY_SECTORS_PER_TRACK ) ? FLPY_SECTORS_PER_TRACK : sector + 1 );

	push	edi
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN61@flpydsk_re@3:

; 423  : 	flpydsk_send_command ( FLPYDSK_GAP3_LENGTH_3_5 );

	xor	esi, esi
	npad	2
$LL71@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN115@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL71@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LN69@flpydsk_re@3
$LN115@flpydsk_re@3:

; 423  : 	flpydsk_send_command ( FLPYDSK_GAP3_LENGTH_3_5 );

	push	27					; 0000001bH
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN69@flpydsk_re@3:

; 424  : 	flpydsk_send_command ( 0xff );

	xor	esi, esi
	npad	3
$LL79@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN116@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL79@flpydsk_re@3

; 431  : 		flpydsk_read_data ();

	jmp	SHORT $LL85@flpydsk_re@3
$LN116@flpydsk_re@3:

; 424  : 	flpydsk_send_command ( 0xff );

	push	255					; 000000ffH
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	npad	2

; 425  : 
; 426  : 	// wait for irq
; 427  : 	flpydsk_wait_irq ();

$LL85@flpydsk_re@3:
	mov	cl, BYTE PTR __FloppyDiskIRQ
	test	cl, cl
	je	SHORT $LL85@flpydsk_re@3
	mov	BYTE PTR __FloppyDiskIRQ, 0
	mov	edi, 7
	npad	10
$LL3@flpydsk_re@3:

; 431  : 		flpydsk_read_data ();

	xor	esi, esi
$LL91@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN117@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL91@flpydsk_re@3
	jmp	SHORT $LN2@flpydsk_re@3
$LN117@flpydsk_re@3:
	push	1013					; 000003f5H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
$LN2@flpydsk_re@3:

; 428  : 
; 429  : 	// read status info
; 430  : 	for (int j=0; j<7; j++)

	dec	edi
	jne	SHORT $LL3@flpydsk_re@3

; 432  : 
; 433  : 	// let FDC know we handled interrupt
; 434  : 	flpydsk_check_int (&st0,&cyl);

	lea	edx, DWORD PTR _cyl$[esp+4]
	push	edx
	lea	eax, DWORD PTR _st0$[esp+8]
	push	eax
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8
	pop	edi
	pop	esi

; 435  : }

	ret	0
?flpydsk_read_sector_imp@@YAXEEE@Z ENDP			; flpydsk_read_sector_imp
_TEXT	ENDS
PUBLIC	?flpydsk_seek@@YAHEE@Z				; flpydsk_seek
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_seek@@YAHEE@Z
_TEXT	SEGMENT
$T3516 = -12						; size = 1
_cyl0$ = -8						; size = 4
_st0$ = -4						; size = 4
_cyl$ = 8						; size = 1
_head$ = 12						; size = 1
?flpydsk_seek@@YAHEE@Z PROC				; flpydsk_seek, COMDAT

; 438  : int flpydsk_seek ( uint8_t cyl, uint8_t head ) {

	sub	esp, 12					; 0000000cH

; 439  : 
; 440  : 	uint32_t st0, cyl0;
; 441  : 
; 442  : 	if (_CurrentDrive >= 4)

	cmp	BYTE PTR __CurrentDrive, 4
	jb	SHORT $LN5@flpydsk_se@2

; 443  : 		return -1;

	or	eax, -1

; 462  : }

	add	esp, 12					; 0000000cH
	ret	0
$LN5@flpydsk_se@2:
	push	ebx

; 444  : 
; 445  : 	for (int i = 0; i < 10; i++ ) {

	mov	bl, BYTE PTR _head$[esp+12]
	push	ebp
	movzx	ebp, BYTE PTR _cyl$[esp+16]
	push	edi
	add	bl, bl
	xor	edi, edi
	add	bl, bl
	push	esi
	npad	10
$LL51@flpydsk_se@2:

; 446  : 
; 447  : 		// send the command
; 448  : 		flpydsk_send_command (FDC_CMD_SEEK);

	xor	esi, esi
$LL11@flpydsk_se@2:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN41@flpydsk_se@2
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL11@flpydsk_se@2

; 455  : 
; 456  : 		// found the cylinder?
; 457  : 		if ( cyl0 == cyl)

	jmp	SHORT $LN9@flpydsk_se@2
$LN41@flpydsk_se@2:

; 446  : 
; 447  : 		// send the command
; 448  : 		flpydsk_send_command (FDC_CMD_SEEK);

	push	15					; 0000000fH
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN9@flpydsk_se@2:

; 449  : 		flpydsk_send_command ( (head) << 2 | _CurrentDrive);

	mov	al, bl
	or	al, BYTE PTR __CurrentDrive
	xor	esi, esi
	mov	BYTE PTR $T3516[esp+28], al
	npad	5
$LL19@flpydsk_se@2:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN42@flpydsk_se@2
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL19@flpydsk_se@2

; 455  : 
; 456  : 		// found the cylinder?
; 457  : 		if ( cyl0 == cyl)

	jmp	SHORT $LN17@flpydsk_se@2
$LN42@flpydsk_se@2:

; 449  : 		flpydsk_send_command ( (head) << 2 | _CurrentDrive);

	mov	ecx, DWORD PTR $T3516[esp+28]
	push	ecx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN17@flpydsk_se@2:

; 450  : 		flpydsk_send_command (cyl);

	xor	esi, esi
$LL27@flpydsk_se@2:
	push	1012					; 000003f4H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	js	SHORT $LN43@flpydsk_se@2
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL27@flpydsk_se@2

; 455  : 
; 456  : 		// found the cylinder?
; 457  : 		if ( cyl0 == cyl)

	jmp	SHORT $LL33@flpydsk_se@2
$LN43@flpydsk_se@2:

; 450  : 		flpydsk_send_command (cyl);

	mov	edx, DWORD PTR _cyl$[esp+24]
	push	edx
	push	1013					; 000003f5H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	npad	2

; 451  : 
; 452  : 		// wait for the results phase IRQ
; 453  : 		flpydsk_wait_irq ();

$LL33@flpydsk_se@2:
	mov	al, BYTE PTR __FloppyDiskIRQ
	test	al, al
	je	SHORT $LL33@flpydsk_se@2

; 454  : 		flpydsk_check_int (&st0,&cyl0);

	lea	ecx, DWORD PTR _cyl0$[esp+28]
	push	ecx
	lea	edx, DWORD PTR _st0$[esp+32]
	push	edx
	mov	BYTE PTR __FloppyDiskIRQ, 0
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8

; 455  : 
; 456  : 		// found the cylinder?
; 457  : 		if ( cyl0 == cyl)

	cmp	DWORD PTR _cyl0$[esp+28], ebp
	je	SHORT $LN44@flpydsk_se@2

; 444  : 
; 445  : 	for (int i = 0; i < 10; i++ ) {

	inc	edi
	cmp	edi, 10					; 0000000aH
	jl	$LL51@flpydsk_se@2

; 459  : 	}
; 460  : 
; 461  : 	return -1;

	pop	esi
	pop	edi
	pop	ebp
	or	eax, -1
	pop	ebx

; 462  : }

	add	esp, 12					; 0000000cH
	ret	0
$LN44@flpydsk_se@2:
	pop	esi
	pop	edi
	pop	ebp

; 458  : 			return 0;

	xor	eax, eax
	pop	ebx

; 462  : }

	add	esp, 12					; 0000000cH
	ret	0
?flpydsk_seek@@YAHEE@Z ENDP				; flpydsk_seek
_TEXT	ENDS
PUBLIC	?flpydsk_lba_to_chs@@YAXHPAH00@Z		; flpydsk_lba_to_chs
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_lba_to_chs@@YAXHPAH00@Z
_TEXT	SEGMENT
_lba$ = 8						; size = 4
_head$ = 12						; size = 4
_track$ = 16						; size = 4
_sector$ = 20						; size = 4
?flpydsk_lba_to_chs@@YAXHPAH00@Z PROC			; flpydsk_lba_to_chs, COMDAT

; 466  : 
; 467  :    *head = ( lba % ( FLPY_SECTORS_PER_TRACK * 2 ) ) / ( FLPY_SECTORS_PER_TRACK );

	mov	ecx, DWORD PTR _lba$[esp-4]
	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 3
	push	esi
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	lea	eax, DWORD PTR [esi+esi*8]
	add	eax, eax
	add	eax, eax
	mov	edx, ecx
	sub	edx, eax
	mov	eax, 954437177				; 38e38e39H
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	edx, DWORD PTR _head$[esp]
	mov	DWORD PTR [edx], eax

; 468  :    *track = lba / ( FLPY_SECTORS_PER_TRACK * 2 );

	mov	eax, DWORD PTR _track$[esp]
	mov	DWORD PTR [eax], esi

; 469  :    *sector = lba % FLPY_SECTORS_PER_TRACK + 1;

	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR _sector$[esp]
	add	edx, edx
	sub	ecx, edx
	inc	ecx
	mov	DWORD PTR [eax], ecx
	pop	esi

; 470  : }

	ret	0
?flpydsk_lba_to_chs@@YAXHPAH00@Z ENDP			; flpydsk_lba_to_chs
_TEXT	ENDS
PUBLIC	?flpydsk_install@@YAXH@Z			; flpydsk_install
EXTRN	?setint@@YAXHP6AXXZ@Z:PROC			; setint
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_install@@YAXH@Z
_TEXT	SEGMENT
_irq$ = 8						; size = 4
?flpydsk_install@@YAXH@Z PROC				; flpydsk_install, COMDAT

; 474  : 
; 475  : 	// install irq handler
; 476  : 	setint (irq, i86_flpy_irq);

	mov	eax, DWORD PTR _irq$[esp-4]
	push	OFFSET ?i86_flpy_irq@@YAXXZ		; i86_flpy_irq
	push	eax
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 477  : 
; 478  : 	// reset the fdc
; 479  : 	flpydsk_reset ();

	call	?flpydsk_reset@@YAXXZ			; flpydsk_reset

; 480  : 
; 481  : 	// set drive information
; 482  : 	flpydsk_drive_data (13, 1, 0xf, true);

	push	1
	push	15					; 0000000fH
	push	1
	push	13					; 0000000dH
	call	?flpydsk_drive_data@@YAXEEE_N@Z		; flpydsk_drive_data
	add	esp, 24					; 00000018H

; 483  : }

	ret	0
?flpydsk_install@@YAXH@Z ENDP				; flpydsk_install
_TEXT	ENDS
PUBLIC	?flpydsk_set_working_drive@@YAXE@Z		; flpydsk_set_working_drive
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_set_working_drive@@YAXE@Z
_TEXT	SEGMENT
_drive$ = 8						; size = 1
?flpydsk_set_working_drive@@YAXE@Z PROC			; flpydsk_set_working_drive, COMDAT

; 487  : 
; 488  : 	if (drive < 4)

	mov	al, BYTE PTR _drive$[esp-4]
	cmp	al, 4
	jae	SHORT $LN1@flpydsk_se@3

; 489  : 		_CurrentDrive = drive;

	mov	BYTE PTR __CurrentDrive, al
$LN1@flpydsk_se@3:

; 490  : }

	ret	0
?flpydsk_set_working_drive@@YAXE@Z ENDP			; flpydsk_set_working_drive
_TEXT	ENDS
PUBLIC	?flpydsk_get_working_drive@@YAEXZ		; flpydsk_get_working_drive
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_get_working_drive@@YAEXZ
_TEXT	SEGMENT
?flpydsk_get_working_drive@@YAEXZ PROC			; flpydsk_get_working_drive, COMDAT

; 494  : 
; 495  : 	return _CurrentDrive;

	mov	al, BYTE PTR __CurrentDrive

; 496  : }

	ret	0
?flpydsk_get_working_drive@@YAEXZ ENDP			; flpydsk_get_working_drive
_TEXT	ENDS
PUBLIC	?flpydsk_read_sector@@YAPAEH@Z			; flpydsk_read_sector
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_read_sector@@YAPAEH@Z
_TEXT	SEGMENT
tv170 = -4						; size = 4
_sectorLBA$ = 8						; size = 4
?flpydsk_read_sector@@YAPAEH@Z PROC			; flpydsk_read_sector, COMDAT

; 499  : uint8_t* flpydsk_read_sector (int sectorLBA) {

	push	ecx
	push	ebx

; 500  : 
; 501  : 	if (_CurrentDrive >= 4)

	mov	bl, BYTE PTR __CurrentDrive
	cmp	bl, 4
	jb	SHORT $LN2@flpydsk_re@4

; 502  : 		return 0;

	xor	eax, eax
	pop	ebx

; 519  : }

	pop	ecx
	ret	0
$LN2@flpydsk_re@4:

; 503  : 
; 504  : 	// convert LBA sector to CHS
; 505  : 	int head=0, track=0, sector=1;
; 506  : 	flpydsk_lba_to_chs (sectorLBA, &head, &track, &sector);

	mov	ecx, DWORD PTR _sectorLBA$[esp+4]
	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 3
	push	ebp
	push	esi
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	lea	eax, DWORD PTR [esi+esi*8]
	add	eax, eax
	add	eax, eax
	mov	edx, ecx
	sub	edx, eax
	mov	eax, 954437177				; 38e38e39H
	imul	edx
	sar	edx, 2
	push	edi
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*8]
	add	edx, edx
	sub	ecx, edx
	lea	ebp, DWORD PTR [ecx+1]

; 507  : 
; 508  : 	// turn motor on and seek to track
; 509  : 	flpydsk_control_motor (true);

	cmp	bl, 3
	ja	SHORT $LN37@flpydsk_re@4
	movzx	ecx, bl
	xor	al, al
	cmp	ecx, 3
	ja	SHORT $LN13@flpydsk_re@4
	jmp	DWORD PTR $LN41@flpydsk_re@4[ecx*4]
$LN12@flpydsk_re@4:
	mov	al, 16					; 00000010H
	jmp	SHORT $LN13@flpydsk_re@4
$LN11@flpydsk_re@4:
	mov	al, 32					; 00000020H
	jmp	SHORT $LN13@flpydsk_re@4
$LN10@flpydsk_re@4:
	mov	al, 64					; 00000040H
	jmp	SHORT $LN13@flpydsk_re@4
$LN9@flpydsk_re@4:
	mov	al, 128					; 00000080H
$LN13@flpydsk_re@4:
	or	bl, al
	or	bl, 12					; 0000000cH
	movzx	eax, bl
	push	eax
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN37@flpydsk_re@4:

; 510  : 	if (flpydsk_seek ((uint8_t)track, (uint8_t)head) != 0)

	push	edi
	push	esi
	call	?flpydsk_seek@@YAHEE@Z			; flpydsk_seek
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@flpydsk_re@4

; 511  : 		return 0;

	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx

; 519  : }

	pop	ecx
	ret	0
$LN1@flpydsk_re@4:

; 512  : 
; 513  : 	// read sector and turn motor off
; 514  : 	flpydsk_read_sector_imp ((uint8_t)head, (uint8_t)track, (uint8_t)sector);

	push	ebp
	push	esi
	push	edi
	call	?flpydsk_read_sector_imp@@YAXEEE@Z	; flpydsk_read_sector_imp

; 515  : 	flpydsk_control_motor (false);

	mov	al, BYTE PTR __CurrentDrive
	add	esp, 12					; 0000000cH
	cmp	al, 3
	ja	SHORT $LN31@flpydsk_re@4
	push	4
	push	1010					; 000003f2H
	call	?outport@@YAXGE@Z			; outport
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN31@flpydsk_re@4:

; 516  : 
; 517  : 	// warning: this is a bit hackish
; 518  : 	return (uint8_t*) DMA_BUFFER;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 4096				; 00001000H
	pop	ebx

; 519  : }

	pop	ecx
	ret	0
	npad	3
$LN41@flpydsk_re@4:
	DD	$LN12@flpydsk_re@4
	DD	$LN11@flpydsk_re@4
	DD	$LN10@flpydsk_re@4
	DD	$LN9@flpydsk_re@4
?flpydsk_read_sector@@YAPAEH@Z ENDP			; flpydsk_read_sector
_TEXT	ENDS
END
