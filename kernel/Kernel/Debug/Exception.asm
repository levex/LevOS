; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\Kernel\Exception.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?kernel_panic@@YAXPBDZZ				; kernel_panic
EXTRN	?outport@@YAXGE@Z:PROC				; outport
EXTRN	?strlen@@YAIPBD@Z:PROC				; strlen
EXTRN	?DebugPrintf@@YAHPBDZZ:PROC			; DebugPrintf
; Function compile flags: /Ogtpy
; File c:\dev\levos\kernel\kernel\exception.cpp
;	COMDAT ?kernel_panic@@YAXPBDZZ
_TEXT	SEGMENT
_fmt$ = 8						; size = 4
?kernel_panic@@YAXPBDZZ PROC				; kernel_panic, COMDAT

; 7    : {

	push	ebx
	push	esi
	push	edi

; 8    : 	_asm cli

	cli

; 9    : 	char* r = (char*)fmt;

	mov	ebx, DWORD PTR _fmt$[esp+8]

; 10   : 	DebugPrintf(fmt);

	push	ebx
	mov	esi, ebx
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 11   : 	for(int i = 0; i < strlen(fmt); i++)

	push	ebx
	xor	edi, edi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 8
	test	eax, eax
	je	SHORT $LL2@kernel_pan
	npad	1
$LL5@kernel_pan:

; 12   : 	{
; 13   : 		outport(0xE9, *r++);

	movzx	eax, BYTE PTR [esi]
	push	eax
	push	233					; 000000e9H
	call	?outport@@YAXGE@Z			; outport
	push	ebx
	inc	esi
	inc	edi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 12					; 0000000cH
	cmp	edi, eax
	jb	SHORT $LL5@kernel_pan
	npad	3
$LL2@kernel_pan:

; 14   : 	}
; 15   : 	for (;;);

	jmp	SHORT $LL2@kernel_pan
?kernel_panic@@YAXPBDZZ ENDP				; kernel_panic
_TEXT	ENDS
PUBLIC	??_C@_0EG@EFLEAAGH@Divide?5by?50?5at?5physical?5address?5@ ; `string'
PUBLIC	?divide_by_zero_fault@@YAXIIII@Z		; divide_by_zero_fault
;	COMDAT ??_C@_0EG@EFLEAAGH@Divide?5by?50?5at?5physical?5address?5@
CONST	SEGMENT
??_C@_0EG@EFLEAAGH@Divide?5by?50?5at?5physical?5address?5@ DB 'Divide by '
	DB	'0 at physical address [0x%x:0x%x] EFLAGS [0x%x] other: 0x%x', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?divide_by_zero_fault@@YAXIIII@Z
_TEXT	SEGMENT
_eflags$ = 8						; size = 4
_cs$ = 12						; size = 4
_eip$ = 16						; size = 4
_other$ = 20						; size = 4
?divide_by_zero_fault@@YAXIIII@Z PROC			; divide_by_zero_fault, COMDAT

; 27   : void _cdecl divide_by_zero_fault (uint32_t eflags,uint32_t cs,uint32_t eip, uint32_t other) {

	push	ebp
	mov	ebp, esp

; 28   : 
; 29   : 	_asm {
; 30   : 		cli

	cli

; 31   : 		add esp, 12

	add	esp, 12					; 0000000cH

; 32   : 		pushad

	pushad

; 33   : 	}
; 34   : 
; 35   : 	kernel_panic ("Divide by 0 at physical address [0x%x:0x%x] EFLAGS [0x%x] other: 0x%x",cs,eip, eflags, other);

	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _eflags$[ebp]
	mov	edx, DWORD PTR _eip$[ebp]
	push	eax
	mov	eax, DWORD PTR _cs$[ebp]
	push	ecx
	push	edx
	push	eax
	push	OFFSET ??_C@_0EG@EFLEAAGH@Divide?5by?50?5at?5physical?5address?5@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@divide_by_:
$LN5@divide_by_:
	int	3
?divide_by_zero_fault@@YAXIIII@Z ENDP			; divide_by_zero_fault
_TEXT	ENDS
PUBLIC	??_C@_0M@HBBAMPBG@Single?5step?$AA@		; `string'
PUBLIC	?single_step_trap@@YAXIII@Z			; single_step_trap
;	COMDAT ??_C@_0M@HBBAMPBG@Single?5step?$AA@
CONST	SEGMENT
??_C@_0M@HBBAMPBG@Single?5step?$AA@ DB 'Single step', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?single_step_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?single_step_trap@@YAXIII@Z PROC			; single_step_trap, COMDAT

; 41   : 
; 42   : 	intstart ();

	cli
	sub	ebp, 4

; 43   : 	kernel_panic ("Single step");

	push	OFFSET ??_C@_0M@HBBAMPBG@Single?5step?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@single_ste:
$LN5@single_ste:
	int	3
?single_step_trap@@YAXIII@Z ENDP			; single_step_trap
_TEXT	ENDS
PUBLIC	??_C@_08MAEPCHJN@NMI?5trap?$AA@			; `string'
PUBLIC	?nmi_trap@@YAXIII@Z				; nmi_trap
;	COMDAT ??_C@_08MAEPCHJN@NMI?5trap?$AA@
CONST	SEGMENT
??_C@_08MAEPCHJN@NMI?5trap?$AA@ DB 'NMI trap', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?nmi_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?nmi_trap@@YAXIII@Z PROC				; nmi_trap, COMDAT

; 49   : 
; 50   : 	intstart ();

	cli
	sub	ebp, 4

; 51   : 	kernel_panic ("NMI trap");

	push	OFFSET ??_C@_08MAEPCHJN@NMI?5trap?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@nmi_trap:
$LN5@nmi_trap:
	int	3
?nmi_trap@@YAXIII@Z ENDP				; nmi_trap
_TEXT	ENDS
PUBLIC	??_C@_0BA@MJDBKJBI@Breakpoint?5trap?$AA@	; `string'
PUBLIC	?breakpoint_trap@@YAXIII@Z			; breakpoint_trap
;	COMDAT ??_C@_0BA@MJDBKJBI@Breakpoint?5trap?$AA@
CONST	SEGMENT
??_C@_0BA@MJDBKJBI@Breakpoint?5trap?$AA@ DB 'Breakpoint trap', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?breakpoint_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?breakpoint_trap@@YAXIII@Z PROC				; breakpoint_trap, COMDAT

; 57   : 
; 58   : 	intstart ();

	cli
	sub	ebp, 4

; 59   : 	kernel_panic ("Breakpoint trap");

	push	OFFSET ??_C@_0BA@MJDBKJBI@Breakpoint?5trap?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@breakpoint:
$LN5@breakpoint:
	int	3
?breakpoint_trap@@YAXIII@Z ENDP				; breakpoint_trap
_TEXT	ENDS
PUBLIC	??_C@_0O@NPIPDPLG@Overflow?5trap?$AA@		; `string'
PUBLIC	?overflow_trap@@YAXIII@Z			; overflow_trap
;	COMDAT ??_C@_0O@NPIPDPLG@Overflow?5trap?$AA@
CONST	SEGMENT
??_C@_0O@NPIPDPLG@Overflow?5trap?$AA@ DB 'Overflow trap', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?overflow_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?overflow_trap@@YAXIII@Z PROC				; overflow_trap, COMDAT

; 65   : 
; 66   : 	intstart ();

	cli
	sub	ebp, 4

; 67   : 	kernel_panic ("Overflow trap");

	push	OFFSET ??_C@_0O@NPIPDPLG@Overflow?5trap?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@overflow_t:
$LN5@overflow_t:
	int	3
?overflow_trap@@YAXIII@Z ENDP				; overflow_trap
_TEXT	ENDS
PUBLIC	??_C@_0BD@OAFDEGEK@Bounds?5check?5fault?$AA@	; `string'
PUBLIC	?bounds_check_fault@@YAXIII@Z			; bounds_check_fault
;	COMDAT ??_C@_0BD@OAFDEGEK@Bounds?5check?5fault?$AA@
CONST	SEGMENT
??_C@_0BD@OAFDEGEK@Bounds?5check?5fault?$AA@ DB 'Bounds check fault', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?bounds_check_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?bounds_check_fault@@YAXIII@Z PROC			; bounds_check_fault, COMDAT

; 73   : 
; 74   : 	intstart ();

	cli
	sub	ebp, 4

; 75   : 	kernel_panic ("Bounds check fault");

	push	OFFSET ??_C@_0BD@OAFDEGEK@Bounds?5check?5fault?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@bounds_che:
$LN5@bounds_che:
	int	3
?bounds_check_fault@@YAXIII@Z ENDP			; bounds_check_fault
_TEXT	ENDS
PUBLIC	??_C@_0DF@BNKMBDNA@?6?$CK?$CK?$CK?5STOP?3?5Invalid?5opcode?5at?50x?$CF@ ; `string'
PUBLIC	?invalid_opcode_fault@@YAXIII@Z			; invalid_opcode_fault
;	COMDAT ??_C@_0DF@BNKMBDNA@?6?$CK?$CK?$CK?5STOP?3?5Invalid?5opcode?5at?50x?$CF@
CONST	SEGMENT
??_C@_0DF@BNKMBDNA@?6?$CK?$CK?$CK?5STOP?3?5Invalid?5opcode?5at?50x?$CF@ DB 0aH
	DB	'*** STOP: Invalid opcode at 0x%x:0x%x [EFLAGS=0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?invalid_opcode_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?invalid_opcode_fault@@YAXIII@Z PROC			; invalid_opcode_fault, COMDAT

; 81   : 
; 82   : 	intstart ();

	cli
	sub	ebp, 4

; 83   : 	DebugPrintf ("\n*** STOP: Invalid opcode at 0x%x:0x%x [EFLAGS=0x%X]", cs, eip, eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DF@BNKMBDNA@?6?$CK?$CK?$CK?5STOP?3?5Invalid?5opcode?5at?50x?$CF@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 16					; 00000010H
	npad	3
$LL2@invalid_op:

; 84   : 	for (;;);

	jmp	SHORT $LL2@invalid_op
?invalid_opcode_fault@@YAXIII@Z ENDP			; invalid_opcode_fault
_TEXT	ENDS
PUBLIC	??_C@_0BB@KJJKIIDM@Device?5not?5found?$AA@	; `string'
PUBLIC	?no_device_fault@@YAXIII@Z			; no_device_fault
;	COMDAT ??_C@_0BB@KJJKIIDM@Device?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BB@KJJKIIDM@Device?5not?5found?$AA@ DB 'Device not found', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?no_device_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?no_device_fault@@YAXIII@Z PROC				; no_device_fault, COMDAT

; 89   : 
; 90   : 	intstart ();

	cli
	sub	ebp, 4

; 91   : 	kernel_panic ("Device not found");

	push	OFFSET ??_C@_0BB@KJJKIIDM@Device?5not?5found?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@no_device_:
$LN5@no_device_:
	int	3
?no_device_fault@@YAXIII@Z ENDP				; no_device_fault
_TEXT	ENDS
PUBLIC	??_C@_0N@EMHPBCJE@Double?5fault?$AA@		; `string'
PUBLIC	?double_fault_abort@@YAXIIII@Z			; double_fault_abort
;	COMDAT ??_C@_0N@EMHPBCJE@Double?5fault?$AA@
CONST	SEGMENT
??_C@_0N@EMHPBCJE@Double?5fault?$AA@ DB 'Double fault', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?double_fault_abort@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?double_fault_abort@@YAXIIII@Z PROC			; double_fault_abort, COMDAT

; 97   : 
; 98   : 	intstart ();

	cli
	sub	ebp, 4

; 99   : 	kernel_panic ("Double fault");

	push	OFFSET ??_C@_0N@EMHPBCJE@Double?5fault?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@double_fau:
$LN5@double_fau:
	int	3
?double_fault_abort@@YAXIIII@Z ENDP			; double_fault_abort
_TEXT	ENDS
PUBLIC	??_C@_0M@OLMALBPG@Invalid?5TSS?$AA@		; `string'
PUBLIC	?invalid_tss_fault@@YAXIIII@Z			; invalid_tss_fault
;	COMDAT ??_C@_0M@OLMALBPG@Invalid?5TSS?$AA@
CONST	SEGMENT
??_C@_0M@OLMALBPG@Invalid?5TSS?$AA@ DB 'Invalid TSS', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?invalid_tss_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?invalid_tss_fault@@YAXIIII@Z PROC			; invalid_tss_fault, COMDAT

; 105  : 
; 106  : 	intstart ();

	cli
	sub	ebp, 4

; 107  : 	kernel_panic ("Invalid TSS");

	push	OFFSET ??_C@_0M@OLMALBPG@Invalid?5TSS?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@invalid_ts:
$LN5@invalid_ts:
	int	3
?invalid_tss_fault@@YAXIIII@Z ENDP			; invalid_tss_fault
_TEXT	ENDS
PUBLIC	??_C@_0BA@FIBIGBGL@Invalid?5segment?$AA@	; `string'
PUBLIC	?no_segment_fault@@YAXIIII@Z			; no_segment_fault
;	COMDAT ??_C@_0BA@FIBIGBGL@Invalid?5segment?$AA@
CONST	SEGMENT
??_C@_0BA@FIBIGBGL@Invalid?5segment?$AA@ DB 'Invalid segment', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?no_segment_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?no_segment_fault@@YAXIIII@Z PROC			; no_segment_fault, COMDAT

; 113  : 
; 114  : 	intstart ();

	cli
	sub	ebp, 4

; 115  : 	kernel_panic ("Invalid segment");

	push	OFFSET ??_C@_0BA@FIBIGBGL@Invalid?5segment?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@no_segment:
$LN5@no_segment:
	int	3
?no_segment_fault@@YAXIIII@Z ENDP			; no_segment_fault
_TEXT	ENDS
PUBLIC	??_C@_0M@LEEDKLOB@Stack?5fault?$AA@		; `string'
PUBLIC	?stack_fault@@YAXIIII@Z				; stack_fault
;	COMDAT ??_C@_0M@LEEDKLOB@Stack?5fault?$AA@
CONST	SEGMENT
??_C@_0M@LEEDKLOB@Stack?5fault?$AA@ DB 'Stack fault', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?stack_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?stack_fault@@YAXIIII@Z PROC				; stack_fault, COMDAT

; 121  : 
; 122  : 	intstart ();

	cli
	sub	ebp, 4

; 123  : 	kernel_panic ("Stack fault");

	push	OFFSET ??_C@_0M@LEEDKLOB@Stack?5fault?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@stack_faul:
$LN5@stack_faul:
	int	3
?stack_fault@@YAXIIII@Z ENDP				; stack_fault
_TEXT	ENDS
PUBLIC	??_C@_0BJ@JKJOCMHH@General?5Protection?5Fault?$AA@ ; `string'
PUBLIC	?general_protection_fault@@YAXIIII@Z		; general_protection_fault
;	COMDAT ??_C@_0BJ@JKJOCMHH@General?5Protection?5Fault?$AA@
CONST	SEGMENT
??_C@_0BJ@JKJOCMHH@General?5Protection?5Fault?$AA@ DB 'General Protection'
	DB	' Fault', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?general_protection_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?general_protection_fault@@YAXIIII@Z PROC		; general_protection_fault, COMDAT

; 129  : 
; 130  : 	intstart ();

	cli
	sub	ebp, 4

; 131  : 	kernel_panic ("General Protection Fault");

	push	OFFSET ??_C@_0BJ@JKJOCMHH@General?5Protection?5Fault?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@general_pr:
$LN5@general_pr:
	int	3
?general_protection_fault@@YAXIIII@Z ENDP		; general_protection_fault
_TEXT	ENDS
PUBLIC	??_C@_0M@EBNJMEJL@Page?5fault?$CB?$AA@		; `string'
PUBLIC	??_C@_0DC@JDMANOJG@Page?5Fault?5at?50x?$CFx?30x?$CFx?5referenc@ ; `string'
PUBLIC	?page_fault@@YAXIIII@Z				; page_fault
;	COMDAT ??_C@_0M@EBNJMEJL@Page?5fault?$CB?$AA@
CONST	SEGMENT
??_C@_0M@EBNJMEJL@Page?5fault?$CB?$AA@ DB 'Page fault!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JDMANOJG@Page?5Fault?5at?50x?$CFx?30x?$CFx?5referenc@
CONST	SEGMENT
??_C@_0DC@JDMANOJG@Page?5Fault?5at?50x?$CFx?30x?$CFx?5referenc@ DB 'Page '
	DB	'Fault at 0x%x:0x%x referenced memory at 0x%x', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?page_fault@@YAXIIII@Z
_TEXT	SEGMENT
_faultAddr$ = -4					; size = 4
_err$ = 8						; size = 4
_eflags$ = 12						; size = 4
_cs$ = 16						; size = 4
_eip$ = 20						; size = 4
?page_fault@@YAXIIII@Z PROC				; page_fault, COMDAT

; 137  : void _cdecl page_fault (uint32_t err,uint32_t eflags,uint32_t cs,uint32_t eip) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 138  : 
; 139  : 	_asm	cli

	cli

; 140  : 	_asm	sub		ebp, 4

	sub	ebp, 4

; 141  : 	//kernel_panic("PAGEFAULT");
; 142  : 
; 143  : 	int faultAddr=0;

	mov	DWORD PTR _faultAddr$[ebp], 0

; 144  : 
; 145  : 	_asm {
; 146  : 		mov eax, cr2

	mov	eax, cr2

; 147  : 		mov [faultAddr], eax

	mov	DWORD PTR _faultAddr$[ebp], eax

; 148  : 	}
; 149  : 
; 150  : 	DebugPrintf("Page Fault at 0x%x:0x%x referenced memory at 0x%x",
; 151  : 		cs, eip, faultAddr);

	mov	eax, DWORD PTR _faultAddr$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DC@JDMANOJG@Page?5Fault?5at?50x?$CFx?30x?$CFx?5referenc@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 16					; 00000010H

; 152  : 	kernel_panic("Page fault!");

	push	OFFSET ??_C@_0M@EBNJMEJL@Page?5fault?$CB?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@page_fault:
$LN5@page_fault:
	int	3
?page_fault@@YAXIIII@Z ENDP				; page_fault
_TEXT	ENDS
PUBLIC	??_C@_09ENEAMLC@FPU?5Fault?$AA@			; `string'
PUBLIC	?fpu_fault@@YAXIII@Z				; fpu_fault
;	COMDAT ??_C@_09ENEAMLC@FPU?5Fault?$AA@
CONST	SEGMENT
??_C@_09ENEAMLC@FPU?5Fault?$AA@ DB 'FPU Fault', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?fpu_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?fpu_fault@@YAXIII@Z PROC				; fpu_fault, COMDAT

; 162  : 
; 163  : 	intstart ();

	cli
	sub	ebp, 4

; 164  : 	kernel_panic ("FPU Fault");

	push	OFFSET ??_C@_09ENEAMLC@FPU?5Fault?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@fpu_fault:
$LN5@fpu_fault:
	int	3
?fpu_fault@@YAXIII@Z ENDP				; fpu_fault
_TEXT	ENDS
PUBLIC	??_C@_0BA@DLJHEABO@Alignment?5Check?$AA@	; `string'
PUBLIC	?alignment_check_fault@@YAXIIII@Z		; alignment_check_fault
;	COMDAT ??_C@_0BA@DLJHEABO@Alignment?5Check?$AA@
CONST	SEGMENT
??_C@_0BA@DLJHEABO@Alignment?5Check?$AA@ DB 'Alignment Check', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?alignment_check_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?alignment_check_fault@@YAXIIII@Z PROC			; alignment_check_fault, COMDAT

; 170  : 
; 171  : 	intstart ();

	cli
	sub	ebp, 4

; 172  : 	kernel_panic ("Alignment Check");

	push	OFFSET ??_C@_0BA@DLJHEABO@Alignment?5Check?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@alignment_:
$LN5@alignment_:
	int	3
?alignment_check_fault@@YAXIIII@Z ENDP			; alignment_check_fault
_TEXT	ENDS
PUBLIC	??_C@_0O@LALCKNGJ@Machine?5Check?$AA@		; `string'
PUBLIC	?machine_check_abort@@YAXIII@Z			; machine_check_abort
;	COMDAT ??_C@_0O@LALCKNGJ@Machine?5Check?$AA@
CONST	SEGMENT
??_C@_0O@LALCKNGJ@Machine?5Check?$AA@ DB 'Machine Check', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?machine_check_abort@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?machine_check_abort@@YAXIII@Z PROC			; machine_check_abort, COMDAT

; 178  : 
; 179  : 	intstart ();

	cli
	sub	ebp, 4

; 180  : 	kernel_panic ("Machine Check");

	push	OFFSET ??_C@_0O@LALCKNGJ@Machine?5Check?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@machine_ch:
$LN5@machine_ch:
	int	3
?machine_check_abort@@YAXIII@Z ENDP			; machine_check_abort
_TEXT	ENDS
PUBLIC	??_C@_0P@JHGCNKG@FPU?5SIMD?5fault?$AA@		; `string'
PUBLIC	?simd_fpu_fault@@YAXIII@Z			; simd_fpu_fault
;	COMDAT ??_C@_0P@JHGCNKG@FPU?5SIMD?5fault?$AA@
CONST	SEGMENT
??_C@_0P@JHGCNKG@FPU?5SIMD?5fault?$AA@ DB 'FPU SIMD fault', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?simd_fpu_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?simd_fpu_fault@@YAXIII@Z PROC				; simd_fpu_fault, COMDAT

; 186  : 
; 187  : 	intstart ();

	cli
	sub	ebp, 4

; 188  : 	kernel_panic ("FPU SIMD fault");

	push	OFFSET ??_C@_0P@JHGCNKG@FPU?5SIMD?5fault?$AA@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
$LN6@simd_fpu_f:
$LN5@simd_fpu_f:
	int	3
?simd_fpu_fault@@YAXIII@Z ENDP				; simd_fpu_fault
_TEXT	ENDS
END
