; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\Kernel\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05JEIACBE@WORKS?$AA@			; `string'
PUBLIC	?test@@YAXXZ					; test
EXTRN	?DebugPrintf@@YAHPBDZZ:PROC			; DebugPrintf
;	COMDAT ??_C@_05JEIACBE@WORKS?$AA@
; File c:\dev\levos\kernel\kernel\main.cpp
CONST	SEGMENT
??_C@_05JEIACBE@WORKS?$AA@ DB 'WORKS', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?test@@YAXXZ
_TEXT	SEGMENT
?test@@YAXXZ PROC					; test, COMDAT

; 40   : 	DebugPrintf("WORKS");

	push	OFFSET ??_C@_05JEIACBE@WORKS?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4
	npad	3
$LL2@test:

; 41   : 	for(;;);

	jmp	SHORT $LL2@test
?test@@YAXXZ ENDP					; test
_TEXT	ENDS
PUBLIC	?getch@@YA?AW4KEYCODE@@XZ			; getch
EXTRN	?kkybrd_discard_last_key@@YAXXZ:PROC		; kkybrd_discard_last_key
EXTRN	?kkybrd_get_last_key@@YA?AW4KEYCODE@@XZ:PROC	; kkybrd_get_last_key
; Function compile flags: /Ogtpy
;	COMDAT ?getch@@YA?AW4KEYCODE@@XZ
_TEXT	SEGMENT
?getch@@YA?AW4KEYCODE@@XZ PROC				; getch, COMDAT

; 45   : KEYCODE	getch () {

	push	esi
$LL2@getch:

; 46   : 	//DebugPrintf("Getch");
; 47   : 	KEYCODE key = KEY_UNKNOWN;
; 48   : 
; 49   : 	// wait for a keypress
; 50   : 	while (key==KEY_UNKNOWN)
; 51   : 		key = kkybrd_get_last_key ();

	call	?kkybrd_get_last_key@@YA?AW4KEYCODE@@XZ	; kkybrd_get_last_key
	mov	esi, eax
	cmp	esi, 16402				; 00004012H
	je	SHORT $LL2@getch

; 52   : 
; 53   : 	// discard last keypress (we handled it) and return
; 54   : 	kkybrd_discard_last_key ();

	call	?kkybrd_discard_last_key@@YAXXZ		; kkybrd_discard_last_key

; 55   : 	return key;

	mov	eax, esi
	pop	esi

; 56   : }

	ret	0
?getch@@YA?AW4KEYCODE@@XZ ENDP				; getch
_TEXT	ENDS
PUBLIC	?getEntryPoint@@YAHH@Z				; getEntryPoint
; Function compile flags: /Ogtpy
;	COMDAT ?getEntryPoint@@YAHH@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
?getEntryPoint@@YAHH@Z PROC				; getEntryPoint, COMDAT

; 60   : 	int PE_HEADER_LOCATION = *(int*)(base + 0x3C); // location of PE HEADER start.
; 61   : 	PE_HEADER_LOCATION += base;
; 62   : 	int OPTIONAL_HEADER_LOCATION = PE_HEADER_LOCATION + 24;

	mov	edx, DWORD PTR _base$[esp-4]
	mov	eax, DWORD PTR [edx+60]
	lea	ecx, DWORD PTR [eax+edx+24]

; 63   : 	int VIRTUAL_ENTRY_POINT = *(int*)(OPTIONAL_HEADER_LOCATION + 16);
; 64   : 	int NUMBER_OF_DIRECTORYHEADERS = *(int*)(OPTIONAL_HEADER_LOCATION + 92);
; 65   : 	int TEXT_HEADER_LOCATION = OPTIONAL_HEADER_LOCATION + 96 + NUMBER_OF_DIRECTORYHEADERS*8;

	mov	eax, DWORD PTR [ecx+92]
	push	esi
	lea	esi, DWORD PTR [ecx+eax*8+96]

; 66   : 	int VIRTUAL_ADDRESS = *(int*)(TEXT_HEADER_LOCATION + 12);
; 67   : 	int POINTER_TO_RAW_DATA = *(int*)(TEXT_HEADER_LOCATION+20);
; 68   : 	return (base + VIRTUAL_ENTRY_POINT - VIRTUAL_ADDRESS + POINTER_TO_RAW_DATA);

	mov	eax, DWORD PTR [esi+20]
	sub	eax, DWORD PTR [esi+12]
	pop	esi
	add	eax, DWORD PTR [ecx+16]
	add	eax, edx

; 69   : }

	ret	0
?getEntryPoint@@YAHH@Z ENDP				; getEntryPoint
_TEXT	ENDS
PUBLIC	??_C@_0BA@NBBNMPGM@?6?$FLLevOS?9KRNL?$FN?$HO?$CD?$AA@ ; `string'
PUBLIC	?loop@@YAXXZ					; loop
EXTRN	?DebugPutc@@YAXE@Z:PROC				; DebugPutc
EXTRN	?kkybrd_key_to_ascii@@YADW4KEYCODE@@@Z:PROC	; kkybrd_key_to_ascii
;	COMDAT ??_C@_0BA@NBBNMPGM@?6?$FLLevOS?9KRNL?$FN?$HO?$CD?$AA@
CONST	SEGMENT
??_C@_0BA@NBBNMPGM@?6?$FLLevOS?9KRNL?$FN?$HO?$CD?$AA@ DB 0aH, '[LevOS-KRN'
	DB	'L]~#', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?loop@@YAXXZ
_TEXT	SEGMENT
_c$3597 = -4						; size = 1
?loop@@YAXXZ PROC					; loop, COMDAT

; 386  : {

	push	ecx
	push	esi

; 387  : 	DebugPrintf("\n[LevOS-KRNL]~#");

	push	OFFSET ??_C@_0BA@NBBNMPGM@?6?$FLLevOS?9KRNL?$FN?$HO?$CD?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
$LN13@loop:
	add	esp, 4
	npad	1

; 388  : 	KEYCODE key;
; 389  : 	//geninterrupt(0x21);
; 390  : 	while(true)
; 391  : 	{
; 392  : 		key = getch();

$LL7@loop:
	call	?kkybrd_get_last_key@@YA?AW4KEYCODE@@XZ	; kkybrd_get_last_key
	mov	esi, eax
	cmp	esi, 16402				; 00004012H
	je	SHORT $LL7@loop
	call	?kkybrd_discard_last_key@@YAXXZ		; kkybrd_discard_last_key

; 393  : 		char c = kkybrd_key_to_ascii(key);

	push	esi
	call	?kkybrd_key_to_ascii@@YADW4KEYCODE@@@Z	; kkybrd_key_to_ascii
	add	esp, 4
	mov	BYTE PTR _c$3597[esp+8], al

; 394  : 		if(c!=0)DebugPutc(c);

	test	al, al
	je	SHORT $LL7@loop
	mov	eax, DWORD PTR _c$3597[esp+8]
	push	eax
	call	?DebugPutc@@YAXE@Z			; DebugPutc

; 395  : 	}

	jmp	SHORT $LN13@loop
?loop@@YAXXZ ENDP					; loop
_TEXT	ENDS
PUBLIC	??_C@_07INNMNHPJ@cmd?4exe?$AA@			; `string'
PUBLIC	??_C@_0BE@LCPKODCM@?6Loading?5up?5shell?3?5?$AA@ ; `string'
PUBLIC	??_C@_0CJ@KMJKDNIK@?6Multitasking?5Testing?5has?5been?5d@ ; `string'
PUBLIC	??_C@_0CN@DLLMGEPA@Press?5any?5key?5to?5continue?5to?5the@ ; `string'
PUBLIC	??_C@_0O@CHBMCDKH@Saving?5font?3?5?$AA@		; `string'
PUBLIC	??_C@_0BB@CAIKOGDG@Mounting?5FAT12?3?5?$AA@	; `string'
PUBLIC	??_C@_0BH@BHKEMDDP@Setting?5up?5drives?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@HNCICFID@Setting?5up?5Mouse?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_08GLNGGDPJ@DISABLED?$AA@			; `string'
PUBLIC	??_C@_0BG@GHPIMDEG@Setting?5up?5Keyboard?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BN@MKEKCMMH@Enabling?5Exceptions?5?$CG?5IRQs?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BE@NKMGLHLP@Setting?5up?5PIT?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@NJONCFJE@Setting?5up?5PICs?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@EBKAFGEE@Setting?5up?5IDT?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@IJGCINNG@Setting?5up?5GDT?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@OCGOOMEB@Enabling?5Paging?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03JLOMOCCD@OK?6?$AA@			; `string'
PUBLIC	??_C@_0BE@CFDKAHDD@Setting?5up?5Paging?3?5?$AA@	; `string'
PUBLIC	??_C@_0CE@EEMONILL@Loading?5Virtual?5Memory?5Manager?3?5@ ; `string'
PUBLIC	??_C@_0CF@JENKCJHG@Loading?5Physical?5Memory?5Manager?3@ ; `string'
PUBLIC	??_C@_05MBDEGLCK@ERROR?$AA@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK?$AA@			; `string'
PUBLIC	??_C@_0L@DNGAJNGH@0xC0000000?$AA@		; `string'
PUBLIC	??_C@_0CD@CHEEAOJK@LevOS2?5loading?5Kernel?5Version?3?5?$CF@ ; `string'
PUBLIC	??_C@_06FMMPDGK@060713?$AA@			; `string'
PUBLIC	_main
EXTRN	?PE_mapApp@@YADPADH@Z:PROC			; PE_mapApp
EXTRN	?setCurrentProc@@YAXPAU__PROCESS@@@Z:PROC	; setCurrentProc
EXTRN	?taskthree@@YAXXZ:PROC				; taskthree
EXTRN	?tasktwo@@YAXXZ:PROC				; tasktwo
EXTRN	?allocStack@@YAPAEPAU__PROCESS@@@Z:PROC		; allocStack
EXTRN	?taskone@@YAXXZ:PROC				; taskone
EXTRN	?initProcessManager@@YAXXZ:PROC			; initProcessManager
EXTRN	?VGA_setfont@@YAXPAD@Z:PROC			; VGA_setfont
EXTRN	?fsysFatInitialize@@YAXU__DATA_DEVICE@@@Z:PROC	; fsysFatInitialize
EXTRN	?vd_getCurrentDataDevice@@YA?AU__DATA_DEVICE@@XZ:PROC ; vd_getCurrentDataDevice
EXTRN	?vd_populate@@YA_NXZ:PROC			; vd_populate
EXTRN	?mice_install@@YA_NXZ:PROC			; mice_install
EXTRN	?kkybrd_enable@@YAXXZ:PROC			; kkybrd_enable
EXTRN	?kkybrd_install@@YAXH@Z:PROC			; kkybrd_install
EXTRN	?i86_pit_start_counter@@YAXIEE@Z:PROC		; i86_pit_start_counter
EXTRN	?i86_pit_initialize@@YA_NXZ:PROC		; i86_pit_initialize
EXTRN	?simd_fpu_fault@@YAXIII@Z:PROC			; simd_fpu_fault
EXTRN	?machine_check_abort@@YAXIII@Z:PROC		; machine_check_abort
EXTRN	?alignment_check_fault@@YAXIIII@Z:PROC		; alignment_check_fault
EXTRN	?fpu_fault@@YAXIII@Z:PROC			; fpu_fault
EXTRN	?page_fault@@YAXIIII@Z:PROC			; page_fault
EXTRN	?general_protection_fault@@YAXIIII@Z:PROC	; general_protection_fault
EXTRN	?stack_fault@@YAXIIII@Z:PROC			; stack_fault
EXTRN	?no_segment_fault@@YAXIIII@Z:PROC		; no_segment_fault
EXTRN	?invalid_tss_fault@@YAXIIII@Z:PROC		; invalid_tss_fault
EXTRN	?double_fault_abort@@YAXIIII@Z:PROC		; double_fault_abort
EXTRN	?no_device_fault@@YAXIII@Z:PROC			; no_device_fault
EXTRN	?invalid_opcode_fault@@YAXIII@Z:PROC		; invalid_opcode_fault
EXTRN	?bounds_check_fault@@YAXIII@Z:PROC		; bounds_check_fault
EXTRN	?overflow_trap@@YAXIII@Z:PROC			; overflow_trap
EXTRN	?breakpoint_trap@@YAXIII@Z:PROC			; breakpoint_trap
EXTRN	?nmi_trap@@YAXIII@Z:PROC			; nmi_trap
EXTRN	?single_step_trap@@YAXIII@Z:PROC		; single_step_trap
EXTRN	?setint@@YAXHP6AXXZ@Z:PROC			; setint
EXTRN	?divide_by_zero_fault@@YAXIIII@Z:PROC		; divide_by_zero_fault
EXTRN	?pic_initialize@@YA_NEE@Z:PROC			; pic_initialize
EXTRN	?i86_install_ir@@YAHIGGP6AXXZ@Z:PROC		; i86_install_ir
EXTRN	?handleSysCall@@YAXXZ:PROC			; handleSysCall
EXTRN	?i86_setup@@YA_NH@Z:PROC			; i86_setup
EXTRN	?malloc@@YAPAXH@Z:PROC				; malloc
EXTRN	?i86_gdt_setup@@YA_NH@Z:PROC			; i86_gdt_setup
EXTRN	?vm_enable_paging@@YA_NXZ:PROC			; vm_enable_paging
EXTRN	?vm_map_virt_to_phys@@YAXHH@Z:PROC		; vm_map_virt_to_phys
EXTRN	?vm_setup@@YA_NPAX@Z:PROC			; vm_setup
EXTRN	?malloc_ps@@YAPAXPADH@Z:PROC			; malloc_ps
EXTRN	?pm_setup@@YA_NPAD@Z:PROC			; pm_setup
EXTRN	?DebugSetColor@@YAII@Z:PROC			; DebugSetColor
EXTRN	?DebugClrScr@@YAXG@Z:PROC			; DebugClrScr
_BSS	SEGMENT
_p2	DB	02bH DUP (?)
	ALIGN	4

_p	DB	02bH DUP (?)
	ALIGN	4

_currentData DB	020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_07INNMNHPJ@cmd?4exe?$AA@
CONST	SEGMENT
??_C@_07INNMNHPJ@cmd?4exe?$AA@ DB 'cmd.exe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LCPKODCM@?6Loading?5up?5shell?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@LCPKODCM@?6Loading?5up?5shell?3?5?$AA@ DB 0aH, 'Loading up shel'
	DB	'l: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KMJKDNIK@?6Multitasking?5Testing?5has?5been?5d@
CONST	SEGMENT
??_C@_0CJ@KMJKDNIK@?6Multitasking?5Testing?5has?5been?5d@ DB 0aH, 'Multit'
	DB	'asking Testing has been disabled!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DLLMGEPA@Press?5any?5key?5to?5continue?5to?5the@
CONST	SEGMENT
??_C@_0CN@DLLMGEPA@Press?5any?5key?5to?5continue?5to?5the@ DB 'Press any '
	DB	'key to continue to the terminal...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CHBMCDKH@Saving?5font?3?5?$AA@
CONST	SEGMENT
??_C@_0O@CHBMCDKH@Saving?5font?3?5?$AA@ DB 'Saving font: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CAIKOGDG@Mounting?5FAT12?3?5?$AA@
CONST	SEGMENT
??_C@_0BB@CAIKOGDG@Mounting?5FAT12?3?5?$AA@ DB 'Mounting FAT12: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHKEMDDP@Setting?5up?5drives?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BH@BHKEMDDP@Setting?5up?5drives?3?5?$CFs?6?$AA@ DB 'Setting up dri'
	DB	'ves: %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HNCICFID@Setting?5up?5Mouse?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BG@HNCICFID@Setting?5up?5Mouse?3?5?$CFs?6?$AA@ DB 'Setting up Mous'
	DB	'e: %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08GLNGGDPJ@DISABLED?$AA@
CONST	SEGMENT
??_C@_08GLNGGDPJ@DISABLED?$AA@ DB 'DISABLED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GHPIMDEG@Setting?5up?5Keyboard?3?5?$AA@
CONST	SEGMENT
??_C@_0BG@GHPIMDEG@Setting?5up?5Keyboard?3?5?$AA@ DB 'Setting up Keyboard'
	DB	': ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MKEKCMMH@Enabling?5Exceptions?5?$CG?5IRQs?3?5?$AA@
CONST	SEGMENT
??_C@_0BN@MKEKCMMH@Enabling?5Exceptions?5?$CG?5IRQs?3?5?$AA@ DB 'Enabling'
	DB	' Exceptions & IRQs: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NKMGLHLP@Setting?5up?5PIT?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BE@NKMGLHLP@Setting?5up?5PIT?3?5?$CFs?6?$AA@ DB 'Setting up PIT: %'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NJONCFJE@Setting?5up?5PICs?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BF@NJONCFJE@Setting?5up?5PICs?3?5?$CFs?6?$AA@ DB 'Setting up PICs:'
	DB	' %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EBKAFGEE@Setting?5up?5IDT?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BE@EBKAFGEE@Setting?5up?5IDT?3?5?$CFs?6?$AA@ DB 'Setting up IDT: %'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IJGCINNG@Setting?5up?5GDT?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BE@IJGCINNG@Setting?5up?5GDT?3?5?$CFs?6?$AA@ DB 'Setting up GDT: %'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OCGOOMEB@Enabling?5Paging?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BF@OCGOOMEB@Enabling?5Paging?3?5?$CFs?6?$AA@ DB 'Enabling Paging: '
	DB	'%s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03JLOMOCCD@OK?6?$AA@
CONST	SEGMENT
??_C@_03JLOMOCCD@OK?6?$AA@ DB 'OK', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CFDKAHDD@Setting?5up?5Paging?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@CFDKAHDD@Setting?5up?5Paging?3?5?$AA@ DB 'Setting up Paging: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EEMONILL@Loading?5Virtual?5Memory?5Manager?3?5@
CONST	SEGMENT
??_C@_0CE@EEMONILL@Loading?5Virtual?5Memory?5Manager?3?5@ DB 'Loading Vir'
	DB	'tual Memory Manager: %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JENKCJHG@Loading?5Physical?5Memory?5Manager?3@
CONST	SEGMENT
??_C@_0CF@JENKCJHG@Loading?5Physical?5Memory?5Manager?3@ DB 'Loading Phys'
	DB	'ical Memory Manager: %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT
??_C@_05MBDEGLCK@ERROR?$AA@ DB 'ERROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK?$AA@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK?$AA@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DNGAJNGH@0xC0000000?$AA@
CONST	SEGMENT
??_C@_0L@DNGAJNGH@0xC0000000?$AA@ DB '0xC0000000', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CHEEAOJK@LevOS2?5loading?5Kernel?5Version?3?5?$CF@
CONST	SEGMENT
??_C@_0CD@CHEEAOJK@LevOS2?5loading?5Kernel?5Version?3?5?$CF@ DB 'LevOS2 l'
	DB	'oading Kernel Version: %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMMPDGK@060713?$AA@
CONST	SEGMENT
??_C@_06FMMPDGK@060713?$AA@ DB '060713', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _main
_TEXT	SEGMENT
_p3$ = -84						; size = 43
$T3683 = -40						; size = 32
__font$ = -8						; size = 4
__ts$ = -4						; size = 4
_main	PROC						; COMDAT

; 120  : void _cdecl main () {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 121  : 
; 122  : 	int i=0x12;
; 123  : 
; 124  : 	DebugClrScr (0x18);

	push	24					; 00000018H
	call	?DebugClrScr@@YAXG@Z			; DebugClrScr

; 125  : 	DebugSetColor (0x17);

	push	23					; 00000017H
	call	?DebugSetColor@@YAII@Z			; DebugSetColor
	add	esp, 8

; 126  : 	bool retur = false;

	xor	bl, bl

; 127  : 	int _ts = 0;

	mov	DWORD PTR __ts$[ebp], 0

; 128  : 	_asm mov _ts, edx

	mov	DWORD PTR __ts$[ebp], edx

; 129  : 	if(_ts == 0x1337) { retur = true; goto returning;}

	cmp	DWORD PTR __ts$[ebp], 4919		; 00001337H
	jne	SHORT $LN22@main
	mov	bl, 1
	jmp	SHORT $LN20@main
$LN22@main:

; 130  : 
; 131  : 	DebugPrintf ("LevOS2 loading Kernel Version: %s\n", KERNEL_VERSION);

	push	OFFSET ??_C@_06FMMPDGK@060713?$AA@
	push	OFFSET ??_C@_0CD@CHEEAOJK@LevOS2?5loading?5Kernel?5Version?3?5?$CF@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 132  : 	DebugPrintf ("Loading Physical Memory Manager: %s\n", (pm_setup((char*)(KERNEL_BASE+KERNEL_SIZE+4096)) ? "OK":"ERROR"));

	push	OFFSET ??_C@_0L@DNGAJNGH@0xC0000000?$AA@+24576
	call	?pm_setup@@YA_NPAD@Z			; pm_setup
	add	esp, 12					; 0000000cH
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN26@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN26@main:
	push	eax
	push	OFFSET ??_C@_0CF@JENKCJHG@Loading?5Physical?5Memory?5Manager?3@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 133  : #ifdef DEBUG
; 134  : 	DebugPrintf ("   HEAP start: 0x%X\n", KERNEL_BASE+KERNEL_SIZE+4096);
; 135  : 	DebugPrintf ("Testing malloc: 0x%x", (int)malloc(1));
; 136  : 	DebugPrintf ("; 0x%x", (int)malloc(1));
; 137  : 	DebugPrintf ("; 0x%x\n", (int)malloc(1));
; 138  : #endif
; 139  : 	int pagestart = (((unsigned int)malloc_ps((char*)0x400000,4*1024*1024)));

	push	4194304					; 00400000H
	push	4194304					; 00400000H
	call	?malloc_ps@@YAPAXPADH@Z			; malloc_ps

; 140  : 	DebugPrintf ("Loading Virtual Memory Manager: %s\n", (vm_setup((int*)(pagestart)) ? "OK":"ERROR"));

	push	eax
	call	?vm_setup@@YA_NPAX@Z			; vm_setup
	add	esp, 20					; 00000014H
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN28@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN28@main:
	push	eax
	push	OFFSET ??_C@_0CE@EEMONILL@Loading?5Virtual?5Memory?5Manager?3?5@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 141  : #ifdef DEBUG
; 142  : 	DebugPrintf ("   PAGE start: 0x%X\n", pagestart);
; 143  : 	DebugPrintf ("   malloc failure test: 0x%x\n", (int)malloc(1));
; 144  : #endif
; 145  : returning: /***************/
; 146  : 	if(!retur)DebugPrintf ("Setting up Paging: ");

	push	OFFSET ??_C@_0BE@CFDKAHDD@Setting?5up?5Paging?3?5?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 12					; 0000000cH
$LN20@main:

; 147  : 	vm_map_virt_to_phys(0, 0); // 0-4mb

	push	0
	push	0
	call	?vm_map_virt_to_phys@@YAXHH@Z		; vm_map_virt_to_phys

; 148  : 	vm_map_virt_to_phys(1, 0x400000); //4mb - 8mb

	push	4194304					; 00400000H
	push	1
	call	?vm_map_virt_to_phys@@YAXHH@Z		; vm_map_virt_to_phys

; 149  : 	vm_map_virt_to_phys(2, 0x800000); // 8-12

	push	8388608					; 00800000H
	push	2
	call	?vm_map_virt_to_phys@@YAXHH@Z		; vm_map_virt_to_phys

; 150  : 	vm_map_virt_to_phys(3, 0xC00000); // 12-16

	push	12582912				; 00c00000H
	push	3
	call	?vm_map_virt_to_phys@@YAXHH@Z		; vm_map_virt_to_phys

; 151  : 	vm_map_virt_to_phys(4, 0x1000000); // 16-18

	push	16777216				; 01000000H
	push	4
	call	?vm_map_virt_to_phys@@YAXHH@Z		; vm_map_virt_to_phys

; 152  : 	vm_map_virt_to_phys(767, 0x1400000); // process stack reserve start: 0xBFC00000 - 0xC0000000 (4mb)

	push	20971520				; 01400000H
	push	767					; 000002ffH
	call	?vm_map_virt_to_phys@@YAXHH@Z		; vm_map_virt_to_phys

; 153  : 	vm_map_virt_to_phys(768, 0x100000); // 3gb+ 

	push	1048576					; 00100000H
	push	768					; 00000300H
	call	?vm_map_virt_to_phys@@YAXHH@Z		; vm_map_virt_to_phys
	add	esp, 56					; 00000038H

; 154  : 	if(!retur)DebugPrintf ("OK\n");

	test	bl, bl
	jne	SHORT $LN17@main
	push	OFFSET ??_C@_03JLOMOCCD@OK?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4

; 155  : 	if(!retur)DebugPrintf ("Enabling Paging: %s\n", vm_enable_paging()?"OK":"ERROR");

	call	?vm_enable_paging@@YA_NXZ		; vm_enable_paging
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN30@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN30@main:
	push	eax
	push	OFFSET ??_C@_0BF@OCGOOMEB@Enabling?5Paging?3?5?$CFs?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 156  : 	//int GDTstart = (int)malloc(sizeof(struct gdt_descriptor)*MAX_DESCRIPTORS);
; 157  : 	int GDTstart = 0x400;
; 158  : 	if(!retur)DebugPrintf ("Setting up GDT: %s\n", i86_gdt_setup(GDTstart)?"OK":"ERROR");

	push	1024					; 00000400H
	call	?i86_gdt_setup@@YA_NH@Z			; i86_gdt_setup
	add	esp, 12					; 0000000cH
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN32@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN32@main:
	push	eax
	push	OFFSET ??_C@_0BE@IJGCINNG@Setting?5up?5GDT?3?5?$CFs?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8
$LN17@main:

; 159  : #ifdef DEBUG 
; 160  : 		DebugPrintf ("   GDT start: 0x%X\n", GDTstart);
; 161  : 		DebugPrintf ("   malloc failure test: 0x%x\n", (int)malloc(1));
; 162  : #endif
; 163  : 	int IDTstart = (int)malloc(sizeof(struct idt_descriptor)*I86_MAX_INTERRUPTS);

	push	2048					; 00000800H
	call	?malloc@@YAPAXH@Z			; malloc
	add	esp, 4

; 164  : 	if(!retur)DebugPrintf ("Setting up IDT: %s\n", i86_setup(IDTstart)?"OK":"ERROR");

	test	bl, bl
	jne	SHORT $LN16@main
	push	eax
	call	?i86_setup@@YA_NH@Z			; i86_setup
	add	esp, 4
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN34@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN34@main:
	push	eax
	push	OFFSET ??_C@_0BE@EBKAFGEE@Setting?5up?5IDT?3?5?$CFs?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8
$LN16@main:

; 165  : #ifdef DEBUG 
; 166  : 		DebugPrintf ("   IDT start: 0x%X\n", IDTstart);
; 167  : 		DebugPrintf ("   malloc failure test: 0x%x\n", (int)malloc(1));
; 168  : #endif
; 169  : 	i86_install_ir (0x2F, I86_IDT_DESC_PRESENT | I86_IDT_DESC_BIT32, 0x8, (I86_IRQ_HANDLER)handleSysCall); // install SystemCall

	push	OFFSET ?handleSysCall@@YAXXZ		; handleSysCall
	push	8
	push	142					; 0000008eH
	push	47					; 0000002fH
	call	?i86_install_ir@@YAHIGGP6AXXZ@Z		; i86_install_ir
	add	esp, 16					; 00000010H

; 170  : 	if(!retur)DebugPrintf ("Setting up PICs: %s\n",  pic_initialize(0x20, 0x28)?"OK":"ERROR");

	test	bl, bl
	jne	SHORT $LN15@main
	push	40					; 00000028H
	push	32					; 00000020H
	call	?pic_initialize@@YA_NEE@Z		; pic_initialize
	add	esp, 8
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN36@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN36@main:
	push	eax
	push	OFFSET ??_C@_0BF@NJONCFJE@Setting?5up?5PICs?3?5?$CFs?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8
$LN15@main:

; 171  : 	setint (0,(void (__cdecl &)(void))divide_by_zero_fault);

	push	OFFSET ?divide_by_zero_fault@@YAXIIII@Z	; divide_by_zero_fault
	push	0
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 172  : 	setint (1,(void (__cdecl &)(void))single_step_trap);

	push	OFFSET ?single_step_trap@@YAXIII@Z	; single_step_trap
	push	1
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 173  : 	setint (2,(void (__cdecl &)(void))nmi_trap);

	push	OFFSET ?nmi_trap@@YAXIII@Z		; nmi_trap
	push	2
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 174  : 	setint (3,(void (__cdecl &)(void))breakpoint_trap);

	push	OFFSET ?breakpoint_trap@@YAXIII@Z	; breakpoint_trap
	push	3
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 175  : 	setint (4,(void (__cdecl &)(void))overflow_trap);

	push	OFFSET ?overflow_trap@@YAXIII@Z		; overflow_trap
	push	4
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 176  : 	setint (5,(void (__cdecl &)(void))bounds_check_fault);

	push	OFFSET ?bounds_check_fault@@YAXIII@Z	; bounds_check_fault
	push	5
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 177  : 	setint (6,(void (__cdecl &)(void))invalid_opcode_fault);

	push	OFFSET ?invalid_opcode_fault@@YAXIII@Z	; invalid_opcode_fault
	push	6
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 178  : 	setint (7,(void (__cdecl &)(void))no_device_fault);

	push	OFFSET ?no_device_fault@@YAXIII@Z	; no_device_fault
	push	7
	call	?setint@@YAXHP6AXXZ@Z			; setint
	add	esp, 64					; 00000040H

; 179  : 	setint (8,(void (__cdecl &)(void))double_fault_abort);

	push	OFFSET ?double_fault_abort@@YAXIIII@Z	; double_fault_abort
	push	8
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 180  : 	setint (10,(void (__cdecl &)(void))invalid_tss_fault);

	push	OFFSET ?invalid_tss_fault@@YAXIIII@Z	; invalid_tss_fault
	push	10					; 0000000aH
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 181  : 	setint (11,(void (__cdecl &)(void))no_segment_fault);

	push	OFFSET ?no_segment_fault@@YAXIIII@Z	; no_segment_fault
	push	11					; 0000000bH
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 182  : 	setint (12,(void (__cdecl &)(void))stack_fault);

	push	OFFSET ?stack_fault@@YAXIIII@Z		; stack_fault
	push	12					; 0000000cH
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 183  : 	setint (13,(void (__cdecl &)(void))general_protection_fault);

	push	OFFSET ?general_protection_fault@@YAXIIII@Z ; general_protection_fault
	push	13					; 0000000dH
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 184  : 	setint (14,(void (__cdecl &)(void))page_fault);

	push	OFFSET ?page_fault@@YAXIIII@Z		; page_fault
	push	14					; 0000000eH
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 185  : 	setint (16,(void (__cdecl &)(void))fpu_fault);

	push	OFFSET ?fpu_fault@@YAXIII@Z		; fpu_fault
	push	16					; 00000010H
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 186  : 	setint (17,(void (__cdecl &)(void))alignment_check_fault);

	push	OFFSET ?alignment_check_fault@@YAXIIII@Z ; alignment_check_fault
	push	17					; 00000011H
	call	?setint@@YAXHP6AXXZ@Z			; setint
	add	esp, 64					; 00000040H

; 187  : 	setint (18,(void (__cdecl &)(void))machine_check_abort);

	push	OFFSET ?machine_check_abort@@YAXIII@Z	; machine_check_abort
	push	18					; 00000012H
	call	?setint@@YAXHP6AXXZ@Z			; setint

; 188  : 	setint (19,(void (__cdecl &)(void))simd_fpu_fault);

	push	OFFSET ?simd_fpu_fault@@YAXIII@Z	; simd_fpu_fault
	push	19					; 00000013H
	call	?setint@@YAXHP6AXXZ@Z			; setint
	add	esp, 16					; 00000010H

; 189  : 	if(!retur)DebugPrintf ("Setting up PIT: %s\n", i86_pit_initialize()?"OK":"ERROR");

	test	bl, bl
	jne	SHORT $LN14@main
	call	?i86_pit_initialize@@YA_NXZ		; i86_pit_initialize
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN38@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN38@main:
	push	eax
	push	OFFSET ??_C@_0BE@NKMGLHLP@Setting?5up?5PIT?3?5?$CFs?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8
$LN14@main:

; 190  : 	i86_pit_start_counter (200,I86_PIT_OCW_COUNTER_0, I86_PIT_OCW_MODE_SQUAREWAVEGEN);

	push	6
	push	0
	push	200					; 000000c8H
	call	?i86_pit_start_counter@@YAXIEE@Z	; i86_pit_start_counter
	add	esp, 12					; 0000000cH

; 191  : 	if(!retur)DebugPrintf ("Enabling Exceptions & IRQs: ");

	test	bl, bl
	jne	SHORT $LN13@main
	push	OFFSET ??_C@_0BN@MKEKCMMH@Enabling?5Exceptions?5?$CG?5IRQs?3?5?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4
$LN13@main:

; 192  : 	_asm sti

	sti

; 193  : 	if(!retur)DebugPrintf ("OK\n");

	test	bl, bl
	jne	SHORT $LN11@main
	push	OFFSET ??_C@_03JLOMOCCD@OK?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 194  : 	//setint (0x20, irq0handler);
; 195  : 	if(!retur)DebugPrintf ("Setting up Keyboard: ");

	push	OFFSET ??_C@_0BG@GHPIMDEG@Setting?5up?5Keyboard?3?5?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8
$LN11@main:

; 196  : 	kkybrd_install(33);

	push	33					; 00000021H
	call	?kkybrd_install@@YAXH@Z			; kkybrd_install
	add	esp, 4

; 197  : 	kkybrd_enable();

	call	?kkybrd_enable@@YAXXZ			; kkybrd_enable

; 198  : 	if(!retur)DebugPrintf ("OK\n");

	test	bl, bl
	jne	SHORT $LN10@main
	push	OFFSET ??_C@_03JLOMOCCD@OK?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4
$LN10@main:

; 199  : 	DebugPrintf("Setting up Mouse: %s\n", mice_install()?"OK":"DISABLED");

	call	?mice_install@@YA_NXZ			; mice_install
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN40@main
	mov	eax, OFFSET ??_C@_08GLNGGDPJ@DISABLED?$AA@
$LN40@main:
	push	eax
	push	OFFSET ??_C@_0BG@HNCICFID@Setting?5up?5Mouse?3?5?$CFs?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8

; 200  : 	DebugPrintf ("Setting up drives: %s\n", vd_populate()?"OK":"ERROR");

	call	?vd_populate@@YA_NXZ			; vd_populate
	test	al, al
	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	jne	SHORT $LN42@main
	mov	eax, OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
$LN42@main:
	push	eax
	push	OFFSET ??_C@_0BH@BHKEMDDP@Setting?5up?5drives?3?5?$CFs?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8

; 201  : 	if(!retur)currentData = vd_getCurrentDataDevice();

	test	bl, bl
	jne	SHORT $LN9@main
	lea	eax, DWORD PTR $T3683[ebp]
	push	eax
	call	?vd_getCurrentDataDevice@@YA?AU__DATA_DEVICE@@XZ ; vd_getCurrentDataDevice
	mov	ecx, 8
	mov	esi, eax
	mov	edi, OFFSET _currentData
	add	esp, 4
	rep movsd
$LN9@main:

; 202  : #ifdef DEBUG
; 203  : 	DebugPrintf ("Testing VD_READ: OK\n");
; 204  : 	//cmd_read_sect();
; 205  : #endif
; 206  : 	DebugPrintf ("Mounting FAT12: ");

	push	OFFSET ??_C@_0BB@CAIKOGDG@Mounting?5FAT12?3?5?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4

; 207  : 	if(!retur)fsysFatInitialize(currentData);

	test	bl, bl
	jne	SHORT $LN6@main
	sub	esp, 32					; 00000020H
	mov	ecx, 8
	mov	esi, OFFSET _currentData
	mov	edi, esp
	rep movsd
	call	?fsysFatInitialize@@YAXU__DATA_DEVICE@@@Z ; fsysFatInitialize

; 208  : #ifdef DEBUG
; 209  : 	FILE file = volOpenFile ("test.txt");
; 210  : 	while (file.eof != 1) {
; 211  : 
; 212  : 		// read cluster
; 213  : 		unsigned char buf[512];
; 214  : 		volReadFile ( &file, buf, 512);
; 215  : 
; 216  : 		// display file
; 217  : 		for (int i=0; i<512; i++)
; 218  : 			DebugPutc(buf[i]);
; 219  : 
; 220  : 		// wait for input to continue if not EOF
; 221  : 		if (file.eof != 1) {
; 222  : 			DebugPrintf ("\n\r------[Press a key to continue]------");
; 223  : 			getch ();
; 224  : 			DebugPrintf ("\r"); //clear last line
; 225  : 		}
; 226  : 	}
; 227  : #endif
; 228  : 	if(!retur)DebugPrintf("OK\n");

	push	OFFSET ??_C@_03JLOMOCCD@OK?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 229  : 	if(!retur)DebugPrintf("Saving font: ");

	push	OFFSET ??_C@_0O@CHBMCDKH@Saving?5font?3?5?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 40					; 00000028H
$LN6@main:

; 230  : 	char* _font = (char*)malloc(8192);

	push	8192					; 00002000H
	call	?malloc@@YAPAXH@Z			; malloc
	add	esp, 4
	mov	DWORD PTR __font$[ebp], eax

; 231  : 	/*short _es;
; 232  : 	short _bx;
; 233  : 	_asm mov _es, [0x1990]
; 234  : 	_asm mov _bx, [0x199F]
; 235  : 	char* loc = (char*)(_es * 0x10 + _bx);
; 236  : 	memcpy(loc, _font, 8192);
; 237  : 	VGA_setfont(_font);*/
; 238  : 	_asm {
; 239  : 		;clear even/odd
; 240  : 		mov			dx, 03ceh

	mov	dx, 974					; 000003ceH

; 241  : 		mov			ax, 5

	mov	ax, 5

; 242  : 		out			dx, ax

	out	dx, ax

; 243  : 		;map VGA memory to 0A0000h
; 244  : 		mov			ax, 0406h

	mov	ax, 1030				; 00000406H

; 245  : 		out			dx, ax

	out	dx, ax

; 246  : 		;set bitplane 2
; 247  : 		mov			dx, 03c4h

	mov	dx, 964					; 000003c4H

; 248  : 		mov			ax, 0402h

	mov	ax, 1026				; 00000402H

; 249  : 		out			dx, ax

	out	dx, ax

; 250  : 		;clear even/odd mode
; 251  : 		mov			ax, 0604h

	mov	ax, 1540				; 00000604H

; 252  : 		out			dx, ax

	out	dx, ax

; 253  : 		mov			esi, 0A0000h

	mov	esi, 655360				; 000a0000H

; 254  : 		mov			ecx, 256

	mov	ecx, 256				; 00000100H

; 255  : 		mov			edi, _font

	mov	edi, DWORD PTR __font$[ebp]

; 256  : 		cld

	cld
$lol$3573:

; 257  : 		;copy 16 bytes to bitmap
; 258  : lol:	movsd

	movsd

; 259  : 		movsd

	movsd

; 260  : 		movsd

	movsd

; 261  : 		movsd

	movsd

; 262  : 		;skip another 16 bytes
; 263  : 		add			esi, 16

	add	esi, 16					; 00000010H

; 264  : 		loop			lol

	loop	$lol$3573

; 265  : 		;restore VGA state to normal operation
; 266  : 		mov			ax, 0302h

	mov	ax, 770					; 00000302H

; 267  : 		out			dx, ax

	out	dx, ax

; 268  : 		mov			ax, 0204h

	mov	ax, 516					; 00000204H

; 269  : 		out			dx, ax

	out	dx, ax

; 270  : 		mov			dx, 03ceh

	mov	dx, 974					; 000003ceH

; 271  : 		mov			ax, 1005h

	mov	ax, 4101				; 00001005H

; 272  : 		out			dx, ax

	out	dx, ax

; 273  : 		mov			ax, 0E06h

	mov	ax, 3590				; 00000e06H

; 274  : 		out			dx, ax

	out	dx, ax

; 275  : 	}
; 276  : 	VGA_setfont(_font);

	mov	ecx, DWORD PTR __font$[ebp]
	push	ecx
	call	?VGA_setfont@@YAXPAD@Z			; VGA_setfont

; 277  : 	DebugPrintf("OK\n");

	push	OFFSET ??_C@_03JLOMOCCD@OK?6?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8

; 278  : 	//DebugSetColor(0x17);
; 279  : 	if(!retur)DebugPrintf("Press any key to continue to the terminal...");

	test	bl, bl
	jne	SHORT $LN45@main
	push	OFFSET ??_C@_0CN@DLLMGEPA@Press?5any?5key?5to?5continue?5to?5the@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4
	npad	4

; 280  : 	if(!retur)getch();

$LL44@main:
	call	?kkybrd_get_last_key@@YA?AW4KEYCODE@@XZ	; kkybrd_get_last_key
	cmp	eax, 16402				; 00004012H
	je	SHORT $LL44@main
	call	?kkybrd_discard_last_key@@YAXXZ		; kkybrd_discard_last_key
$LN45@main:

; 281  : 	//DebugPrintf("\nMultitasking Testing has been enabled!");
; 282  : 	//startMultitask();
; 283  : 	//for(;;);
; 284  : 	DebugPrintf("\nMultitasking Testing has been disabled!");

	push	OFFSET ??_C@_0CJ@KMJKDNIK@?6Multitasking?5Testing?5has?5been?5d@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4

; 285  : 	initProcessManager();

	call	?initProcessManager@@YAXXZ		; initProcessManager

; 286  : 
; 287  : 	//p = (PROCESS*)malloc(sizeof(PROCESS));
; 288  : 	getch();

$LL48@main:
	call	?kkybrd_get_last_key@@YA?AW4KEYCODE@@XZ	; kkybrd_get_last_key
	cmp	eax, 16402				; 00004012H
	je	SHORT $LL48@main
	call	?kkybrd_discard_last_key@@YAXXZ		; kkybrd_discard_last_key

; 289  : 	p.valid = true;
; 290  : 	p.ran = false;
; 291  : 	p.eip = (int)taskone;
; 292  : 	allocStack(&p);

	push	OFFSET _p
	mov	WORD PTR _p, 1
	mov	DWORD PTR _p+7, OFFSET ?taskone@@YAXXZ	; taskone
	call	?allocStack@@YAPAEPAU__PROCESS@@@Z	; allocStack

; 293  : 	//addProcess(&p);
; 294  : 	//getch();
; 295  : 
; 296  : 	//p2 = (PROCESS*)malloc(sizeof(PROCESS));
; 297  : 	p2.valid = true;
; 298  : 	p2.ran = false;
; 299  : 	p2.eip = (int)tasktwo;
; 300  : 	allocStack(&p2);

	push	OFFSET _p2
	mov	WORD PTR _p2, 1
	mov	DWORD PTR _p2+7, OFFSET ?tasktwo@@YAXXZ	; tasktwo
	call	?allocStack@@YAPAEPAU__PROCESS@@@Z	; allocStack

; 301  : 	//addProcess(&p2);
; 302  : 	//getch();
; 303  : 
; 304  : 	PROCESS p3;
; 305  : 	p3.valid = true;
; 306  : 	p3.ran = false;
; 307  : 	p3.eip = (int)taskthree;
; 308  : 	allocStack(&p3);

	lea	edx, DWORD PTR _p3$[ebp]
	push	edx
	mov	WORD PTR _p3$[ebp], 1
	mov	DWORD PTR _p3$[ebp+7], OFFSET ?taskthree@@YAXXZ ; taskthree
	call	?allocStack@@YAPAEPAU__PROCESS@@@Z	; allocStack

; 309  : 	//addProcess(&p3);
; 310  : 	//getch();
; 311  : 
; 312  : 	setCurrentProc(&p);

	push	OFFSET _p
	call	?setCurrentProc@@YAXPAU__PROCESS@@@Z	; setCurrentProc
	add	esp, 16					; 00000010H

; 313  : 
; 314  : 	//startMultitask();
; 315  : 	/*int a = p.regs.esp;
; 316  : 	_asm mov esp, a
; 317  : 	a = p.regs.ebp;
; 318  : 	_asm mov ebp, a*/
; 319  : 	//taskone();
; 320  : 	/*int a = 0;
; 321  : 	a = p.regs->eip;
; 322  : 	_asm call a*/
; 323  : 
; 324  : 	//for(;;);
; 325  : 	if(!retur)DebugPrintf("\nLoading up shell: ");

	test	bl, bl
	jne	SHORT $LN3@main
	push	OFFSET ??_C@_0BE@LCPKODCM@?6Loading?5up?5shell?3?5?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 4
$LN3@main:

; 326  : 	/*DebugPrintf("\nFiles in root: \n");
; 327  : 	char* files = fsysFatGetFilesInRoot();
; 328  : 	char num = fsysFatGetNumberOfFilesInRoot();
; 329  : 	char name[11];
; 330  : 	for(int i = 0; i < num; i++)
; 331  : 	{
; 332  : 			for(int j = 0; j < 11; j++)
; 333  : 			{
; 334  : 				DebugPutc(*(files + j + i *11));
; 335  : 			}
; 336  : 			DebugPutc('\n');
; 337  : 	}
; 338  : 	getch();*/
; 339  : 	//memcpy((char*)0x100000,(char*)0xB8000, 32768); //fixme
; 340  : 	//loadFileToLoc("cmd.exe", (void*)IMAGE_BASE);
; 341  : 	char err = PE_mapApp("cmd.exe", IMAGE_BASE);

	push	12582912				; 00c00000H
	push	OFFSET ??_C@_07INNMNHPJ@cmd?4exe?$AA@
	call	?PE_mapApp@@YADPADH@Z			; PE_mapApp
	add	esp, 8
$LL2@main:

; 342  : 	for(;;);

	jmp	SHORT $LL2@main
_main	ENDP
_TEXT	ENDS
END
