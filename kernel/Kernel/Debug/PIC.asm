; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\Kernel\PIC.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?pic_send_command@@YAXEE@Z			; pic_send_command
EXTRN	?outport@@YAXGE@Z:PROC				; outport
; Function compile flags: /Ogtpy
; File c:\dev\levos\kernel\kernel\pic.cpp
;	COMDAT ?pic_send_command@@YAXEE@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 1
_picNum$ = 12						; size = 1
?pic_send_command@@YAXEE@Z PROC				; pic_send_command, COMDAT

; 73   : 
; 74   : 	if (picNum > 1)

	mov	al, BYTE PTR _picNum$[esp-4]
	cmp	al, 1
	ja	SHORT $LN2@pic_send_c

; 75   : 		return;
; 76   : 
; 77   : 	uint8_t	reg = (picNum==1) ? I86_PIC2_REG_COMMAND : I86_PIC1_REG_COMMAND;
; 78   : 	outport (reg, cmd);

	mov	ecx, DWORD PTR _cmd$[esp-4]
	dec	al
	neg	al
	sbb	al, al
	and	al, 128					; 00000080H
	add	al, 160					; 000000a0H
	movzx	eax, al
	mov	DWORD PTR _picNum$[esp-4], ecx
	mov	DWORD PTR _cmd$[esp-4], eax
	jmp	?outport@@YAXGE@Z			; outport
$LN2@pic_send_c:

; 79   : }

	ret	0
?pic_send_command@@YAXEE@Z ENDP				; pic_send_command
_TEXT	ENDS
PUBLIC	?pic_send_data@@YAXEE@Z				; pic_send_data
; Function compile flags: /Ogtpy
;	COMDAT ?pic_send_data@@YAXEE@Z
_TEXT	SEGMENT
_data$ = 8						; size = 1
_picNum$ = 12						; size = 1
?pic_send_data@@YAXEE@Z PROC				; pic_send_data, COMDAT

; 84   : 
; 85   : 	if (picNum > 1)

	mov	al, BYTE PTR _picNum$[esp-4]
	cmp	al, 1
	ja	SHORT $LN2@pic_send_d

; 86   : 		return;
; 87   : 
; 88   : 	uint8_t	reg = (picNum==1) ? I86_PIC2_REG_DATA : I86_PIC1_REG_DATA;
; 89   : 	outport (reg, data);

	mov	ecx, DWORD PTR _data$[esp-4]
	dec	al
	neg	al
	sbb	al, al
	and	al, 128					; 00000080H
	add	al, 161					; 000000a1H
	movzx	eax, al
	mov	DWORD PTR _picNum$[esp-4], ecx
	mov	DWORD PTR _data$[esp-4], eax
	jmp	?outport@@YAXGE@Z			; outport
$LN2@pic_send_d:

; 90   : }

	ret	0
?pic_send_data@@YAXEE@Z ENDP				; pic_send_data
_TEXT	ENDS
PUBLIC	?pic_read_data@@YAEE@Z				; pic_read_data
EXTRN	?inport@@YAEG@Z:PROC				; inport
; Function compile flags: /Ogtpy
;	COMDAT ?pic_read_data@@YAEE@Z
_TEXT	SEGMENT
_picNum$ = 8						; size = 1
?pic_read_data@@YAEE@Z PROC				; pic_read_data, COMDAT

; 95   : 
; 96   : 	if (picNum > 1)

	mov	al, BYTE PTR _picNum$[esp-4]
	cmp	al, 1
	jbe	SHORT $LN1@pic_read_d

; 97   : 		return 0;

	xor	al, al

; 101  : }

	ret	0
$LN1@pic_read_d:

; 98   : 
; 99   : 	uint8_t	reg = (picNum==1) ? I86_PIC2_REG_DATA : I86_PIC1_REG_DATA;

	dec	al
	neg	al
	sbb	al, al
	and	al, 128					; 00000080H
	add	al, 161					; 000000a1H

; 100  : 	return inport (reg);

	movzx	eax, al
	mov	ecx, eax
	mov	DWORD PTR _picNum$[esp-4], ecx
	jmp	?inport@@YAEG@Z				; inport
?pic_read_data@@YAEE@Z ENDP				; pic_read_data
_TEXT	ENDS
PUBLIC	?pic_initialize@@YA_NEE@Z			; pic_initialize
; Function compile flags: /Ogtpy
;	COMDAT ?pic_initialize@@YA_NEE@Z
_TEXT	SEGMENT
_base0$ = 8						; size = 1
_base1$ = 12						; size = 1
?pic_initialize@@YA_NEE@Z PROC				; pic_initialize, COMDAT

; 105  : 
; 106  : 	uint8_t		icw	= 0;
; 107  : 
; 108  : 	// disable hardware interrupts
; 109  : 	_asm cli

	cli

; 110  : 
; 111  : 	// Begin initialization of PIC
; 112  : 
; 113  : 	icw = (icw & ~I86_PIC_ICW1_MASK_INIT) | I86_PIC_ICW1_INIT_YES;
; 114  : 	icw = (icw & ~I86_PIC_ICW1_MASK_IC4) | I86_PIC_ICW1_IC4_EXPECT;
; 115  : 
; 116  : 	pic_send_command (icw, 0);

	push	17					; 00000011H
	push	32					; 00000020H
	call	?outport@@YAXGE@Z			; outport

; 117  : 	pic_send_command (icw, 1);

	push	17					; 00000011H
	push	160					; 000000a0H
	call	?outport@@YAXGE@Z			; outport

; 118  : 
; 119  : 	// Send initialization control word 2. This is the base addresses of the irq's
; 120  : 
; 121  : 	pic_send_data (base0, 0);

	mov	eax, DWORD PTR _base0$[esp+12]
	push	eax
	push	33					; 00000021H
	call	?outport@@YAXGE@Z			; outport

; 122  : 	pic_send_data (base1, 1);

	mov	ecx, DWORD PTR _base1$[esp+20]
	push	ecx
	push	161					; 000000a1H
	call	?outport@@YAXGE@Z			; outport

; 123  : 
; 124  : 	// Send initialization control word 3. This is the connection between master and slave.
; 125  : 	// ICW3 for master PIC is the IR that connects to secondary pic in binary format
; 126  : 	// ICW3 for secondary PIC is the IR that connects to master pic in decimal format
; 127  : 
; 128  : 	pic_send_data (0x04, 0);

	push	4
	push	33					; 00000021H
	call	?outport@@YAXGE@Z			; outport

; 129  : 	pic_send_data (0x02, 1);

	push	2
	push	161					; 000000a1H
	call	?outport@@YAXGE@Z			; outport

; 130  : 
; 131  : 	// Send Initialization control word 4. Enables i86 mode
; 132  : 
; 133  : 	icw = (icw & ~I86_PIC_ICW4_MASK_UPM) | I86_PIC_ICW4_UPM_86MODE;
; 134  : 
; 135  : 	pic_send_data (icw, 0);

	push	17					; 00000011H
	push	33					; 00000021H
	call	?outport@@YAXGE@Z			; outport

; 136  : 	pic_send_data (icw, 1);

	push	17					; 00000011H
	push	161					; 000000a1H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 64					; 00000040H

; 137  : 
; 138  : 	return true;

	mov	al, 1

; 139  : }

	ret	0
?pic_initialize@@YA_NEE@Z ENDP				; pic_initialize
_TEXT	ENDS
END
