; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\Kernel\FileSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_FileSystems@@3PAPAU_FILE_SYSTEM@@A		; _FileSystems
_BSS	SEGMENT
?_FileSystems@@3PAPAU_FILE_SYSTEM@@A DD 01aH DUP (?)	; _FileSystems
_BSS	ENDS
PUBLIC	?volOpenFile@@YA?AU_FILE@@PBD@Z			; volOpenFile
; Function compile flags: /Ogtpy
; File c:\dev\levos\kernel\kernel\filesystem.cpp
;	COMDAT ?volOpenFile@@YA?AU_FILE@@PBD@Z
_TEXT	SEGMENT
_file$ = -120						; size = 60
_file$2656 = -120					; size = 60
$T2714 = -60						; size = 60
$T2712 = 8						; size = 4
_fname$ = 12						; size = 4
?volOpenFile@@YA?AU_FILE@@PBD@Z PROC			; volOpenFile, COMDAT

; 13   : 
; 14   : 	if (fname) {

	mov	eax, DWORD PTR _fname$[esp-4]
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi
	test	eax, eax
	je	SHORT $LN1@volOpenFil

; 15   : 
; 16   : 		// default to device 'a'
; 17   : 		unsigned char device = 'a';
; 18   : 
; 19   : 		// filename
; 20   : 		char* filename = (char*) fname;
; 21   : 
; 22   : 		if (fname[2]==':') {

	cmp	BYTE PTR [eax+2], 58			; 0000003aH
	mov	cl, 97					; 00000061H
	mov	edx, eax
	jne	SHORT $LN2@volOpenFil

; 23   : 
; 24   : 			device = fname[0];

	mov	cl, BYTE PTR [eax]

; 25   : 			filename += 3; //strip it from pathname

	lea	edx, DWORD PTR [eax+3]
$LN2@volOpenFil:

; 26   : 		}
; 27   : 
; 28   : 		// call filesystem
; 29   : 		if (_FileSystems [device - 'a']) {

	movzx	ebx, cl
	mov	eax, DWORD PTR ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A[ebx*4-388]
	test	eax, eax
	je	SHORT $LN1@volOpenFil

; 30   : 
; 31   : 			// set volume specific information and return file
; 32   : 			FILE file = _FileSystems[device - 'a']->Open (filename);

	push	edx
	mov	edx, DWORD PTR [eax+28]
	lea	ecx, DWORD PTR $T2714[esp+136]
	push	ecx
	call	edx
	mov	ecx, 15					; 0000000fH
	mov	esi, eax
	lea	edi, DWORD PTR _file$2656[esp+140]
	rep movsd
	add	esp, 8

; 33   : 			file.deviceID = device;

	mov	DWORD PTR _file$2656[esp+188], ebx

; 34   : 			return file;

	jmp	SHORT $LN6@volOpenFil
$LN1@volOpenFil:

; 35   : 		}
; 36   : 	}
; 37   : 
; 38   : 	// return invalid file
; 39   : 	FILE file;
; 40   : 	file.flags = FS_INVALID;

	mov	DWORD PTR _file$[esp+164], 2
$LN6@volOpenFil:

; 41   : 	return file;

	mov	eax, DWORD PTR $T2712[esp+128]
	mov	ecx, 15					; 0000000fH
	mov	edi, eax
	lea	esi, DWORD PTR _file$[esp+132]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx

; 42   : }

	add	esp, 120				; 00000078H
	ret	0
?volOpenFile@@YA?AU_FILE@@PBD@Z ENDP			; volOpenFile
_TEXT	ENDS
PUBLIC	?volReadFile@@YAXPAU_FILE@@PAEI@Z		; volReadFile
; Function compile flags: /Ogtpy
;	COMDAT ?volReadFile@@YAXPAU_FILE@@PAEI@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
_Buffer$ = 12						; size = 4
_Length$ = 16						; size = 4
?volReadFile@@YAXPAU_FILE@@PAEI@Z PROC			; volReadFile, COMDAT

; 48   : 
; 49   : 	if (file)

	mov	ecx, DWORD PTR _file$[esp-4]
	test	ecx, ecx
	je	SHORT $LN1@volReadFil

; 50   : 		if (_FileSystems [file->deviceID - 'a'])

	mov	eax, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A[eax*4-388]
	test	eax, eax
	je	SHORT $LN1@volReadFil

; 51   : 			_FileSystems[file->deviceID - 'a']->Read (file,Buffer,Length);

	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _file$[esp-4], ecx
	jmp	eax
$LN1@volReadFil:

; 52   : }

	ret	0
?volReadFile@@YAXPAU_FILE@@PAEI@Z ENDP			; volReadFile
_TEXT	ENDS
PUBLIC	?volWriteFile@@YAXPAU_FILE@@PAEI@Z		; volWriteFile
; Function compile flags: /Ogtpy
;	COMDAT ?volWriteFile@@YAXPAU_FILE@@PAEI@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
_Buffer$ = 12						; size = 4
_Length$ = 16						; size = 4
?volWriteFile@@YAXPAU_FILE@@PAEI@Z PROC			; volWriteFile, COMDAT

; 56   : 	if (file)

	mov	ecx, DWORD PTR _file$[esp-4]
	test	ecx, ecx
	je	SHORT $LN1@volWriteFi

; 57   : 		if (_FileSystems [file->deviceID - 'a'])

	mov	eax, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A[eax*4-388]
	test	eax, eax
	je	SHORT $LN1@volWriteFi

; 58   : 			_FileSystems[file->deviceID - 'a']->Write (file,Buffer,Length);

	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR _file$[esp-4], ecx
	jmp	eax
$LN1@volWriteFi:

; 59   : }

	ret	0
?volWriteFile@@YAXPAU_FILE@@PAEI@Z ENDP			; volWriteFile
_TEXT	ENDS
PUBLIC	?volCloseFile@@YAXPAU_FILE@@@Z			; volCloseFile
; Function compile flags: /Ogtpy
;	COMDAT ?volCloseFile@@YAXPAU_FILE@@@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
?volCloseFile@@YAXPAU_FILE@@@Z PROC			; volCloseFile, COMDAT

; 66   : 
; 67   : 	if (file)

	mov	ecx, DWORD PTR _file$[esp-4]
	test	ecx, ecx
	je	SHORT $LN1@volCloseFi

; 68   : 		if (_FileSystems [file->deviceID - 'a'])

	mov	eax, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A[eax*4-388]
	test	eax, eax
	je	SHORT $LN1@volCloseFi

; 69   : 			_FileSystems[file->deviceID - 'a']->Close (file);

	mov	DWORD PTR _file$[esp-4], ecx
	mov	ecx, DWORD PTR [eax+24]
	jmp	ecx
$LN1@volCloseFi:

; 70   : }

	ret	0
?volCloseFile@@YAXPAU_FILE@@@Z ENDP			; volCloseFile
_TEXT	ENDS
PUBLIC	?volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z	; volRegisterFileSystem
;	COMDAT ?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z@4HA
_BSS	SEGMENT
?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z@4HA DD 01H DUP (?) ; `volRegisterFileSystem'::`2'::i
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT ?volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z
_TEXT	SEGMENT
_fsys$ = 8						; size = 4
_deviceID$ = 12						; size = 4
?volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z PROC	; volRegisterFileSystem, COMDAT

; 77   : 
; 78   : 	static int i=0;
; 79   : 
; 80   : 	if (i < DEVICE_MAX)

	cmp	DWORD PTR ?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z@4HA, 26 ; 0000001aH
	jge	SHORT $LN1@volRegiste

; 81   : 		if (fsys) {

	mov	eax, DWORD PTR _fsys$[esp-4]
	test	eax, eax
	je	SHORT $LN1@volRegiste

; 82   : 
; 83   : 			_FileSystems[ deviceID ] = fsys;

	mov	ecx, DWORD PTR _deviceID$[esp-4]

; 84   : 			i++;

	inc	DWORD PTR ?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z@4HA
	mov	DWORD PTR ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A[ecx*4], eax
$LN1@volRegiste:

; 85   : 		}
; 86   : }

	ret	0
?volRegisterFileSystem@@YAXPAU_FILE_SYSTEM@@I@Z ENDP	; volRegisterFileSystem
_TEXT	ENDS
PUBLIC	?volUnregisterFileSystem@@YAXPAU_FILE_SYSTEM@@@Z ; volUnregisterFileSystem
; Function compile flags: /Ogtpy
;	COMDAT ?volUnregisterFileSystem@@YAXPAU_FILE_SYSTEM@@@Z
_TEXT	SEGMENT
_fsys$ = 8						; size = 4
?volUnregisterFileSystem@@YAXPAU_FILE_SYSTEM@@@Z PROC	; volUnregisterFileSystem, COMDAT

; 92   : 
; 93   : 	for (int i=0;i < DEVICE_MAX; i++)

	mov	ecx, DWORD PTR _fsys$[esp-4]
	mov	eax, OFFSET ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A ; _FileSystems
	npad	7
$LL4@volUnregis:

; 94   : 		if (_FileSystems[i]==fsys)

	cmp	DWORD PTR [eax], ecx
	jne	SHORT $LN3@volUnregis

; 95   : 			_FileSystems[i]=0;

	mov	DWORD PTR [eax], 0
$LN3@volUnregis:

; 92   : 
; 93   : 	for (int i=0;i < DEVICE_MAX; i++)

	add	eax, 4
	cmp	eax, OFFSET ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A+104
	jl	SHORT $LL4@volUnregis

; 96   : }

	ret	0
?volUnregisterFileSystem@@YAXPAU_FILE_SYSTEM@@@Z ENDP	; volUnregisterFileSystem
_TEXT	ENDS
PUBLIC	?volUnregisterFileSystemByID@@YAXI@Z		; volUnregisterFileSystemByID
; Function compile flags: /Ogtpy
;	COMDAT ?volUnregisterFileSystemByID@@YAXI@Z
_TEXT	SEGMENT
_deviceID$ = 8						; size = 4
?volUnregisterFileSystemByID@@YAXI@Z PROC		; volUnregisterFileSystemByID, COMDAT

; 102  : 
; 103  : 	if (deviceID < DEVICE_MAX)

	mov	eax, DWORD PTR _deviceID$[esp-4]
	cmp	eax, 26					; 0000001aH
	jae	SHORT $LN1@volUnregis@2

; 104  : 		_FileSystems [deviceID] = 0;

	mov	DWORD PTR ?_FileSystems@@3PAPAU_FILE_SYSTEM@@A[eax*4], 0
$LN1@volUnregis@2:

; 105  : }

	ret	0
?volUnregisterFileSystemByID@@YAXI@Z ENDP		; volUnregisterFileSystemByID
_TEXT	ENDS
END
