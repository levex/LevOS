; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Levex\Desktop\newLevOS\Kernel\hw_mouse.cpp.old
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?wcmd@@YAXE@Z					; wcmd
EXTRN	?outport@@YAXGE@Z:PROC				; outport
; Function compile flags: /Ogtpy
; File c:\users\levex\desktop\newlevos\kernel\hw_mouse.cpp.old
;	COMDAT ?wcmd@@YAXE@Z
_TEXT	SEGMENT
_d$ = 8							; size = 1
?wcmd@@YAXE@Z PROC					; wcmd, COMDAT

; 18   : 	outport(CMD_REG_W, d);

	mov	eax, DWORD PTR _d$[esp-4]
	push	eax
	push	100					; 00000064H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 19   : }

	ret	0
?wcmd@@YAXE@Z ENDP					; wcmd
_TEXT	ENDS
PUBLIC	?wdata@@YAXE@Z					; wdata
; Function compile flags: /Ogtpy
;	COMDAT ?wdata@@YAXE@Z
_TEXT	SEGMENT
_d$ = 8							; size = 1
?wdata@@YAXE@Z PROC					; wdata, COMDAT

; 22   : 	outport(DATA_PORT_RW, d);

	mov	eax, DWORD PTR _d$[esp-4]
	push	eax
	push	96					; 00000060H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 23   : }

	ret	0
?wdata@@YAXE@Z ENDP					; wdata
_TEXT	ENDS
PUBLIC	?waitforrdy@@YAXXZ				; waitforrdy
EXTRN	?inport@@YAEG@Z:PROC				; inport
; Function compile flags: /Ogtpy
;	COMDAT ?waitforrdy@@YAXXZ
_TEXT	SEGMENT
?waitforrdy@@YAXXZ PROC					; waitforrdy, COMDAT

; 26   : {

$LL2@waitforrdy:

; 27   : 	while(inport(STAT_REG_R) & 1 != 0);

	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL2@waitforrdy

; 28   : }

	ret	0
?waitforrdy@@YAXXZ ENDP					; waitforrdy
_TEXT	ENDS
PUBLIC	?rresponse@@YADXZ				; rresponse
; Function compile flags: /Ogtpy
;	COMDAT ?rresponse@@YADXZ
_TEXT	SEGMENT
?rresponse@@YADXZ PROC					; rresponse, COMDAT

; 32   : 	waitforrdy();

$LL4@rresponse:
	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL4@rresponse

; 33   : 	return inport(DATA_PORT_RW);

	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4

; 34   : }

	ret	0
?rresponse@@YADXZ ENDP					; rresponse
_TEXT	ENDS
PUBLIC	??_C@_04HOHDFILG@lawl?$AA@			; `string'
PUBLIC	?mice_irq@@YAXXZ				; mice_irq
EXTRN	?interruptdone@@YAXI@Z:PROC			; interruptdone
EXTRN	?DebugPrintf@@YAHPBDZZ:PROC			; DebugPrintf
;	COMDAT ??_C@_04HOHDFILG@lawl?$AA@
CONST	SEGMENT
??_C@_04HOHDFILG@lawl?$AA@ DB 'lawl', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?mice_irq@@YAXXZ
_TEXT	SEGMENT
?mice_irq@@YAXXZ PROC					; mice_irq, COMDAT

; 71   : void _cdecl mice_irq () {

	push	ebx
	push	esi
	push	edi

; 72   : 
; 73   : 	_asm add esp, 12

	add	esp, 12					; 0000000cH

; 74   : 	_asm pushad

	pushad

; 75   : 	_asm cli

	cli

; 76   : 
; 77   : 	DebugPrintf("lawl");

	push	OFFSET ??_C@_04HOHDFILG@lawl?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf

; 78   : 	// tell hal we are done
; 79   : 	interruptdone(12);

	push	12					; 0000000cH
	call	?interruptdone@@YAXI@Z			; interruptdone
	add	esp, 8

; 80   : 
; 81   : 	// return from interrupt handler
; 82   : 	_asm sti

	sti

; 83   : 	_asm popad

	popad

; 84   : 	_asm iretd

	iretd

; 85   : }

	pop	edi
	pop	esi
	pop	ebx
	ret	0
?mice_irq@@YAXXZ ENDP					; mice_irq
_TEXT	ENDS
PUBLIC	??_C@_0BA@KHMMEKB@Mousereply?$DN0x?$CFx?$AA@	; `string'
PUBLIC	?mice_install@@YA_NXZ				; mice_install
;	COMDAT ??_C@_0BA@KHMMEKB@Mousereply?$DN0x?$CFx?$AA@
CONST	SEGMENT
??_C@_0BA@KHMMEKB@Mousereply?$DN0x?$CFx?$AA@ DB 'Mousereply=0x%x', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?mice_install@@YA_NXZ
_TEXT	SEGMENT
_cfg$ = -4						; size = 1
?mice_install@@YA_NXZ PROC				; mice_install, COMDAT

; 37   : {

	push	ecx

; 38   : 	// flush off output register
; 39   : 	inport(0x20);

	push	32					; 00000020H
	call	?inport@@YAEG@Z				; inport

; 40   : 	// init PS2 second device (mouse as per se)
; 41   : 
; 42   : 	wcmd(0x20);

	push	32					; 00000020H
	push	100					; 00000064H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 12					; 0000000cH

; 43   : 	waitforrdy();

$LL8@mice_insta:
	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL8@mice_insta

; 44   : 	char cfg = inport(DATA_PORT_RW);// get config byte

	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport
	and	al, -33					; ffffffdfH

; 45   : 	cfg = cfg|2; // enable 2nd interrupt
; 46   : 	cfg = cfg&~32; // enable 2nd clock

	or	al, 2

; 47   : 	wcmd(0x60);

	push	96					; 00000060H
	push	100					; 00000064H
	mov	BYTE PTR _cfg$[esp+16], al
	call	?outport@@YAXGE@Z			; outport
	add	esp, 12					; 0000000cH
	npad	3

; 48   : 	waitforrdy();

$LL14@mice_insta:
	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL14@mice_insta

; 49   : 	wdata(cfg); // write cfg back

	mov	eax, DWORD PTR _cfg$[esp+4]
	push	eax
	push	96					; 00000060H
	call	?outport@@YAXGE@Z			; outport

; 50   : 
; 51   : 	wcmd(0xA8); // enable second ps2 port

	push	168					; 000000a8H
	push	100					; 00000064H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 16					; 00000010H

; 52   : 	waitforrdy();

$LL22@mice_insta:
	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL22@mice_insta

; 53   : 	wcmd(0xA9); // test second ps2 port

	push	169					; 000000a9H
	push	100					; 00000064H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 54   : 	if(rresponse() == 0) outport(0xE9, 'W');

$LL30@mice_insta:
	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL30@mice_insta
	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, al
	jne	SHORT $LN2@mice_insta
	push	87					; 00000057H
	push	233					; 000000e9H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
$LN2@mice_insta:

; 55   : 
; 56   : 	// enable reporting
; 57   : 	wcmd(0xD4); // write to 2nd input

	push	212					; 000000d4H
	push	100					; 00000064H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	npad	1

; 58   : 	waitforrdy();

$LL36@mice_insta:
	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL36@mice_insta

; 59   : 	wcmd(0xFA); // write enable data reporting

	push	250					; 000000faH
	push	100					; 00000064H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	npad	3

; 60   : 
; 61   : 	// see if it has ACK'd it
; 62   : 	char r = rresponse();

$LL44@mice_insta:
	push	100					; 00000064H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL44@mice_insta
	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport

; 63   : 	if(r!=0xFA) DebugPrintf("Mousereply=0x%x", r); return false;

	movsx	eax, al
	add	esp, 4
	cmp	eax, 250				; 000000faH
	je	SHORT $LN53@mice_insta
	push	eax
	push	OFFSET ??_C@_0BA@KHMMEKB@Mousereply?$DN0x?$CFx?$AA@
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	add	esp, 8
$LN53@mice_insta:
	xor	al, al

; 64   : 
; 65   : 	// create handler for IRQ12 (second PS2 device) INT 44
; 66   : 	setint(44, (I86_IRQ_HANDLER)mice_irq);
; 67   : 
; 68   : 	return true;
; 69   : }

	pop	ecx
	ret	0
?mice_install@@YA_NXZ ENDP				; mice_install
_TEXT	ENDS
END
