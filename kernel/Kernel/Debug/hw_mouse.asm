; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\Kernel\hw_mouse.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_mice_cycle DB	01H DUP (?)
	ALIGN	4

_mice_x	DB	01H DUP (?)
	ALIGN	4

_mice_y	DB	01H DUP (?)
_BSS	ENDS
PUBLIC	?getMouseState@@YA?AUMOUSE_STATE@@XZ		; getMouseState
_BSS	SEGMENT
	ALIGN	4

_mState	DQ	01H DUP (?)
; Function compile flags: /Ogtpy
; File c:\dev\levos\kernel\kernel\hw_mouse.cpp
_BSS	ENDS
;	COMDAT ?getMouseState@@YA?AUMOUSE_STATE@@XZ
_TEXT	SEGMENT
?getMouseState@@YA?AUMOUSE_STATE@@XZ PROC		; getMouseState, COMDAT

; 14   : 	return mState;

	mov	eax, DWORD PTR _mState
	mov	edx, DWORD PTR _mState+4

; 15   : }

	ret	0
?getMouseState@@YA?AUMOUSE_STATE@@XZ ENDP		; getMouseState
_TEXT	ENDS
PUBLIC	?setMouseState@@YAXUMOUSE_STATE@@@Z		; setMouseState
; Function compile flags: /Ogtpy
;	COMDAT ?setMouseState@@YAXUMOUSE_STATE@@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 8
?setMouseState@@YAXUMOUSE_STATE@@@Z PROC		; setMouseState, COMDAT

; 18   : 	mState.mx = m.mx;

	mov	eax, DWORD PTR _m$[esp-4]

; 19   : 	mState.my = m.my;

	mov	ecx, DWORD PTR _m$[esp]
	mov	DWORD PTR _mState, eax
	mov	DWORD PTR _mState+4, ecx

; 20   : }

	ret	0
?setMouseState@@YAXUMOUSE_STATE@@@Z ENDP		; setMouseState
_TEXT	ENDS
PUBLIC	?fillMouseState@@YAXPAUMOUSE_STATE@@@Z		; fillMouseState
; Function compile flags: /Ogtpy
;	COMDAT ?fillMouseState@@YAXPAUMOUSE_STATE@@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
?fillMouseState@@YAXPAUMOUSE_STATE@@@Z PROC		; fillMouseState, COMDAT

; 23   : 	m->mx = mState.mx;

	mov	eax, DWORD PTR _m$[esp-4]
	mov	ecx, DWORD PTR _mState

; 24   : 	m->my = mState.my;

	mov	edx, DWORD PTR _mState+4
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 25   : 	return;
; 26   : }

	ret	0
?fillMouseState@@YAXPAUMOUSE_STATE@@@Z ENDP		; fillMouseState
_TEXT	ENDS
PUBLIC	?mice_handler@@YAXXZ				; mice_handler
EXTRN	?interruptdone@@YAXI@Z:PROC			; interruptdone
EXTRN	?inport@@YAEG@Z:PROC				; inport
EXTRN	?outport@@YAXGE@Z:PROC				; outport
_BSS	SEGMENT
_mice_byte DB	03H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT ?mice_handler@@YAXXZ
_TEXT	SEGMENT
?mice_handler@@YAXXZ PROC				; mice_handler, COMDAT

; 31   : {

	push	ebx
	push	esi
	push	edi

; 32   : 	_asm add esp, 12

	add	esp, 12					; 0000000cH

; 33   : 	_asm pushad

	pushad

; 34   : 	_asm cli

	cli

; 35   : 	outport(0xE9, 'M');

	push	77					; 0000004dH
	push	233					; 000000e9H
	call	?outport@@YAXGE@Z			; outport

; 36   : 	switch(mice_cycle)

	movzx	eax, BYTE PTR _mice_cycle
	add	esp, 8
	sub	eax, 0
	je	SHORT $LN3@mice_handl
	dec	eax
	je	SHORT $LN2@mice_handl
	dec	eax
	jne	SHORT $LN4@mice_handl

; 46   : 		case 2:
; 47   : 			mice_byte[2]=inport(0x60);

	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport

; 48   : 			mice_x=mice_byte[1];

	mov	cl, BYTE PTR _mice_byte+1
	add	esp, 4
	mov	BYTE PTR _mice_byte+2, al
	mov	BYTE PTR _mice_x, cl

; 49   : 			mice_y=mice_byte[2];

	mov	BYTE PTR _mice_y, al

; 50   : 			mice_cycle=0;

	mov	BYTE PTR _mice_cycle, 0

; 51   : 			break;

	jmp	SHORT $LN4@mice_handl
$LN2@mice_handl:

; 41   : 			break;
; 42   : 		case 1:
; 43   : 			mice_byte[1]=inport(0x60);

	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport
	mov	BYTE PTR _mice_byte+1, al

; 44   : 			mice_cycle++;
; 45   : 			break;

	jmp	SHORT $LN9@mice_handl
$LN3@mice_handl:

; 37   : 	{
; 38   : 		case 0:
; 39   : 			mice_byte[0]=inport(0x60);

	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport
	mov	BYTE PTR _mice_byte, al
$LN9@mice_handl:
	add	esp, 4

; 40   : 			mice_cycle++;

	inc	BYTE PTR _mice_cycle
$LN4@mice_handl:

; 52   : 	}
; 53   : 	mState.mx = mice_x;

	movsx	edx, BYTE PTR _mice_x

; 54   : 	mState.my = mice_y;

	movsx	eax, BYTE PTR _mice_y

; 55   : 	// tell hal we are done
; 56   : 	interruptdone(12);

	push	12					; 0000000cH
	mov	DWORD PTR _mState, edx
	mov	DWORD PTR _mState+4, eax
	call	?interruptdone@@YAXI@Z			; interruptdone
	add	esp, 4

; 57   : 
; 58   : 	// return from interrupt handler
; 59   : 	_asm sti

	sti

; 60   : 	_asm popad

	popad

; 61   : 	_asm iretd

	iretd

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	ret	0
?mice_handler@@YAXXZ ENDP				; mice_handler
_TEXT	ENDS
PUBLIC	?mice_wait@@YAXE@Z				; mice_wait
; Function compile flags: /Ogtpy
;	COMDAT ?mice_wait@@YAXE@Z
_TEXT	SEGMENT
_a_type$ = 8						; size = 1
?mice_wait@@YAXE@Z PROC					; mice_wait, COMDAT

; 66   : 	unsigned int _time_out=100000;
; 67   : 	if(a_type==0)

	cmp	BYTE PTR _a_type$[esp-4], 0
	push	esi
	mov	esi, 100000				; 000186a0H
	jne	SHORT $LL3@mice_wait
	npad	3
$LL7@mice_wait:

; 70   : 		{
; 71   : 			if((inport(0x64) & 1)==1)

	push	100					; 00000064H
	dec	esi
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LN14@mice_wait

; 68   : 	{
; 69   : 		while(_time_out--) //Data

	test	esi, esi
	jne	SHORT $LL7@mice_wait
	pop	esi

; 83   : 			{
; 84   : 				return;
; 85   : 			}
; 86   : 		}
; 87   : 		return;
; 88   : 	}
; 89   : }

	ret	0
$LL3@mice_wait:

; 81   : 		{
; 82   : 			if((inport(0x64) & 2)==0)

	push	100					; 00000064H
	dec	esi
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 2
	je	SHORT $LN14@mice_wait

; 72   : 			{
; 73   : 				return;
; 74   : 			}
; 75   : 		}
; 76   : 		return;
; 77   : 	}
; 78   : 	else
; 79   : 	{
; 80   : 		while(_time_out--) //Signal

	test	esi, esi
	jne	SHORT $LL3@mice_wait
$LN14@mice_wait:
	pop	esi

; 83   : 			{
; 84   : 				return;
; 85   : 			}
; 86   : 		}
; 87   : 		return;
; 88   : 	}
; 89   : }

	ret	0
?mice_wait@@YAXE@Z ENDP					; mice_wait
_TEXT	ENDS
PUBLIC	?mice_write@@YAXE@Z				; mice_write
; Function compile flags: /Ogtpy
;	COMDAT ?mice_write@@YAXE@Z
_TEXT	SEGMENT
_a_write$ = 8						; size = 1
?mice_write@@YAXE@Z PROC				; mice_write, COMDAT

; 92   : {

	push	esi

; 93   : 	//Wait to be able to send a command
; 94   : 	mice_wait(1);

	mov	esi, 100000				; 000186a0H
$LL5@mice_write:
	push	100					; 00000064H
	dec	esi
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 2
	je	SHORT $LN28@mice_write
	test	esi, esi
	jne	SHORT $LL5@mice_write
$LN28@mice_write:

; 95   : 	//Tell the mouse we are sending a command
; 96   : 	outport(0x64, 0xD4);

	push	212					; 000000d4H
	push	100					; 00000064H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8

; 97   : 	//Wait for the final part
; 98   : 	mice_wait(1);

	mov	esi, 100000				; 000186a0H
	npad	3
$LL15@mice_write:
	push	100					; 00000064H
	dec	esi
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 2
	je	SHORT $LN30@mice_write
	test	esi, esi
	jne	SHORT $LL15@mice_write
$LN30@mice_write:

; 99   : 	//Finally write
; 100  : 	outport(0x60, a_write);

	mov	eax, DWORD PTR _a_write$[esp]
	push	eax
	push	96					; 00000060H
	call	?outport@@YAXGE@Z			; outport
	add	esp, 8
	pop	esi

; 101  : }

	ret	0
?mice_write@@YAXE@Z ENDP				; mice_write
_TEXT	ENDS
PUBLIC	?mice_read@@YAEXZ				; mice_read
; Function compile flags: /Ogtpy
;	COMDAT ?mice_read@@YAEXZ
_TEXT	SEGMENT
?mice_read@@YAEXZ PROC					; mice_read, COMDAT

; 104  : {

	push	esi

; 105  : 	//Get's response from mouse
; 106  : 	mice_wait(0); 

	mov	esi, 100000				; 000186a0H
$LL9@mice_read:
	push	100					; 00000064H
	dec	esi
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	test	al, 1
	jne	SHORT $LL5@mice_read
	test	esi, esi
	jne	SHORT $LL9@mice_read
	npad	7
$LL5@mice_read:

; 107  : 	return inport(0x60);

	push	96					; 00000060H
	call	?inport@@YAEG@Z				; inport
	add	esp, 4
	pop	esi

; 108  : }

	ret	0
?mice_read@@YAEXZ ENDP					; mice_read
_TEXT	ENDS
PUBLIC	?mice_install@@YA_NXZ				; mice_install
; Function compile flags: /Ogtpy
;	COMDAT ?mice_install@@YA_NXZ
_TEXT	SEGMENT
?mice_install@@YA_NXZ PROC				; mice_install, COMDAT

; 112  : 	return false;

	xor	al, al

; 113  : 	unsigned char _status;  //unsigned char
; 114  : 
; 115  : 	//Enable the auxiliary mouse device
; 116  : 	mice_wait(1);
; 117  : 	outport(0x64, 0xA8);
; 118  :   
; 119  : 	//Enable the interrupts
; 120  : 	mice_wait(1);
; 121  : 	outport(0x64, 0x20);
; 122  : 	mice_wait(0);
; 123  : 	_status=(inport(0x60) | 2);
; 124  : 	mice_wait(1);
; 125  : 	outport(0x64, 0x60);
; 126  : 	mice_wait(1);
; 127  : 	outport(0x60, _status);
; 128  :   
; 129  : 	//Tell the mouse to use default settings
; 130  : 	mice_write(0xF6);
; 131  : 	mice_read();  //Acknowledge
; 132  :   
; 133  : 	//Enable the mouse
; 134  : 	mice_write(0xF4);
; 135  : 	mice_read();  //Acknowledge
; 136  : 
; 137  : 	//Setup the mouse handler
; 138  : 	setint(44, (I86_IRQ_HANDLER)mice_handler);
; 139  : 
; 140  : 	return true;
; 141  : }

	ret	0
?mice_install@@YA_NXZ ENDP				; mice_install
_TEXT	ENDS
END
