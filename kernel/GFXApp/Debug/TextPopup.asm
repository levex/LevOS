; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Dev\LevOS\kernel\GFXApp\TextPopup.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?OUTc@@YAXD@Z					; OUTc
; Function compile flags: /Odtp /ZI
; File c:\dev\levos\kernel\gfxapp\textpopup.cpp
;	COMDAT ?OUTc@@YAXD@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
?OUTc@@YAXD@Z PROC					; OUTc, COMDAT

; 6    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 7    : 		_asm mov dx, 0xE9

	mov	dx, 233					; 000000e9H

; 8    : 		_asm mov al, a

	mov	al, BYTE PTR _a$[ebp]

; 9    : 		_asm out dx, al

	out	dx, al

; 10   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OUTc@@YAXD@Z ENDP					; OUTc
_TEXT	ENDS
PUBLIC	?W_TEXTPOPUP_paint@@YAXPAUWINDOW@@@Z		; W_TEXTPOPUP_paint
EXTRN	?VGA_putstring@@YAXHHPAD@Z:PROC			; VGA_putstring
EXTRN	?VGA_putrect@@YAXHHHH@Z:PROC			; VGA_putrect
EXTRN	?VGA_setcolor@@YAXD@Z:PROC			; VGA_setcolor
EXTRN	?VGA_getcolor@@YADXZ:PROC			; VGA_getcolor
; Function compile flags: /Odtp /ZI
;	COMDAT ?W_TEXTPOPUP_paint@@YAXPAUWINDOW@@@Z
_TEXT	SEGMENT
_c$ = -1						; size = 1
_w$ = 8							; size = 4
?W_TEXTPOPUP_paint@@YAXPAUWINDOW@@@Z PROC		; W_TEXTPOPUP_paint, COMDAT

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 14   : 	char c = VGA_getcolor();

	call	?VGA_getcolor@@YADXZ			; VGA_getcolor
	mov	BYTE PTR _c$[ebp], al

; 15   : 	VGA_setcolor(1);

	push	1
	call	?VGA_setcolor@@YAXD@Z			; VGA_setcolor
	add	esp, 4

; 16   : 	/* WINDOW PRIMITIVE */
; 17   : 	VGA_putrect(w->startX, w->startY, w->endX, w->startY + 12);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+17]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx+21]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx+17]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	?VGA_putrect@@YAXHHHH@Z			; VGA_putrect
	add	esp, 16					; 00000010H

; 18   : 	VGA_putstring(w->startX + 2 , w->startY + 2, w->title);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+30]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx+17]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx+13]
	add	edx, 2
	push	edx
	call	?VGA_putstring@@YAXHHPAD@Z		; VGA_putstring
	add	esp, 12					; 0000000cH

; 19   : 	VGA_putrect(w->startX, w->startY, w->endX, w->endY);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+25]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx+21]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx+17]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	?VGA_putrect@@YAXHHHH@Z			; VGA_putrect
	add	esp, 16					; 00000010H

; 20   : 	/* END WINDOW PRIMITIVE */
; 21   : 	VGA_putstring(w->startX + 2, (w->startY + w->endY) / 2, ((W_TEXTPOPUP*)(w->bigBro))->text);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax+17]
	mov	ecx, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR [ecx+25]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx+13]
	add	eax, 2
	push	eax
	call	?VGA_putstring@@YAXHHPAD@Z		; VGA_putstring
	add	esp, 12					; 0000000cH

; 22   : 	VGA_setcolor(c);

	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	?VGA_setcolor@@YAXD@Z			; VGA_setcolor
	add	esp, 4

; 23   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?W_TEXTPOPUP_paint@@YAXPAUWINDOW@@@Z ENDP		; W_TEXTPOPUP_paint
_TEXT	ENDS
PUBLIC	?W_TEXTPOPUP_move@@YAXPAUWINDOW@@HH@Z		; W_TEXTPOPUP_move
; Function compile flags: /Odtp /ZI
;	COMDAT ?W_TEXTPOPUP_move@@YAXPAUWINDOW@@HH@Z
_TEXT	SEGMENT
_height$ = -8						; size = 4
_width$ = -4						; size = 4
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?W_TEXTPOPUP_move@@YAXPAUWINDOW@@HH@Z PROC		; W_TEXTPOPUP_move, COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 27   : 	//OUTc('C');
; 28   : 	int width = w->endX - w->startX;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [eax+21]
	sub	edx, DWORD PTR [ecx+13]
	mov	DWORD PTR _width$[ebp], edx

; 29   : 	int height = w->endY - w->startY;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [eax+25]
	sub	edx, DWORD PTR [ecx+17]
	mov	DWORD PTR _height$[ebp], edx

; 30   : 	//OUTc('D');
; 31   : 	w->startX = x;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+13], ecx

; 32   : 	w->startY = y;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+17], ecx

; 33   : 	w->endX = w->startX + width;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	add	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+21], ecx

; 34   : 	w->endY = w->startY + height;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+17]
	add	ecx, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+25], ecx

; 35   : 	//OUTc('E');
; 36   : 	return;
; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?W_TEXTPOPUP_move@@YAXPAUWINDOW@@HH@Z ENDP		; W_TEXTPOPUP_move
_TEXT	ENDS
PUBLIC	?W_TEXTPOPUP_init@@YAXPAUW_TEXTPOPUP@@PAUWINDOW@@PAD2@Z ; W_TEXTPOPUP_init
EXTRN	?strlen@@YAIPBD@Z:PROC				; strlen
; Function compile flags: /Odtp /ZI
;	COMDAT ?W_TEXTPOPUP_init@@YAXPAUW_TEXTPOPUP@@PAUWINDOW@@PAD2@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
_w$ = 12						; size = 4
_title$ = 16						; size = 4
_str$ = 20						; size = 4
?W_TEXTPOPUP_init@@YAXPAUW_TEXTPOPUP@@PAUWINDOW@@PAD2@Z PROC ; W_TEXTPOPUP_init, COMDAT

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 41   : 	t->text = str;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax], ecx

; 42   : 	w->startX = 45;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+13], 45			; 0000002dH

; 43   : 	w->startY = 45;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+17], 45			; 0000002dH

; 44   : 	w->endX = w->startX + (strlen(t->text) + 1)*8;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	mov	edx, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [edx+13]
	lea	edx, DWORD PTR [ecx+eax*8+8]
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+21], edx

; 45   : 	w->endY = w->startY + 45;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+17]
	add	ecx, 45					; 0000002dH
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+25], ecx

; 46   : 	w->isValid = true;

	mov	eax, DWORD PTR _w$[ebp]
	mov	BYTE PTR [eax+12], 1

; 47   : 	w->title = title;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _title$[ebp]
	mov	DWORD PTR [eax+30], ecx

; 48   : 	w->paint = (PAINTER)W_TEXTPOPUP_paint;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET ?W_TEXTPOPUP_paint@@YAXPAUWINDOW@@@Z ; W_TEXTPOPUP_paint

; 49   : 	w->move = (MOVER)W_TEXTPOPUP_move;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?W_TEXTPOPUP_move@@YAXPAUWINDOW@@HH@Z ; W_TEXTPOPUP_move

; 50   : 	w->bigBro = t;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 51   : 	t->window = w;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?W_TEXTPOPUP_init@@YAXPAUW_TEXTPOPUP@@PAUWINDOW@@PAD2@Z ENDP ; W_TEXTPOPUP_init
_TEXT	ENDS
END
